<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts on Agile Coaching</title>
    <description>Thoughts on Agile Coaching
</description>
    <link>http://rachelcdavies.github.io/</link>
    <atom:link href="http://rachelcdavies.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 09 Feb 2015 13:56:02 +0000</pubDate>
    <lastBuildDate>Mon, 09 Feb 2015 13:56:02 +0000</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Beyond Coding</title>
        <description>&lt;p&gt;Software development on anything more than a pet projects is a collaborative activity. To enable a group of developers to make any headway, some details inevitably need to be hammered out together. However, you probably find that getting agreement within a group of opinionated developers can be difficult at the best of times. Most software developers haven&amp;#39;t had training in &amp;quot;soft skills&amp;quot; and you may find it hard to know where to start when a difficult question needs to be thrashed out.&lt;/p&gt;
&lt;p&gt;Here are some pointers to areas that you might want to explore beyond the realm of programming languages, methods and frameworks.&lt;/p&gt;
&lt;p&gt;Facilitation is all about making conversations easier but even with a clear meeting purpose and agenda, you may find meetings can go around in circles without reaching consensus. To understand some approaches to making group decisions I recommend &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/927064.Facilitator_s_Guide_to_Participatory_Decision_Making&quot; target=&quot;_blank&quot; title=&quot;Facilitators Guide to Participatory Decision Making&quot;&gt;Facilitator&amp;#39;s Guide to Participatory Decision-Making&lt;/a&gt;&amp;quot; which introduces decision making rules. You can also get affordable hands-on training in facilitation from non-profit ICA-UK on &lt;a href=&quot;http://www.ica-uk.org.uk/group-facilitation-methods/&quot; target=&quot;_blank&quot; title=&quot;Group Facilitation Methods&quot;&gt;Group Facilitation Methods&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another thing you can do to help meeting participants is to create visible agendas and capture points being discussed concisely. If you want to build more confidence with writing neatly on flipcharts and whiteboards, seek out a course in &lt;a href=&quot;http://graphicsmadeeasy.co.uk/&quot; target=&quot;_blank&quot; title=&quot;graphic facilitation&quot;&gt;graphic facilitation&lt;/a&gt; where you can pick up tips and practice with other budding facilitators. To improve how you illustrate system dynamics in group discussions, start to practice drawing Diagrams of Effects. Peter Senge&amp;#39;s book &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/255127.The_Fifth_Discipline&quot; target=&quot;_blank&quot; title=&quot;The Fifth Discipline&quot;&gt;The Fifth Discipline&lt;/a&gt;&amp;quot; has a an excellent introduction to Systems Thinking and an handy set of system archetypes that you can use in different situations.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s an old joke: &lt;em&gt;What is the difference between a Methodologist and a Terrorist? You can negotiate with a terrorist!&lt;/em&gt; When discussions get heated, it&amp;#39;s&amp;#0160; handy to know a little bit about negotiation techniques. The Harvard Negotiation Project have put out a few paperbacks and I recommend &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/22590500-getting-past-no&quot; target=&quot;_blank&quot; title=&quot;Getting Past No&quot;&gt;Getting Past No: Negotiating With Difficult People&lt;/a&gt;&amp;quot; by Fisher and Ury. Another easy read around building trust is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/873993.The_Trusted_Advisor&quot; target=&quot;_blank&quot; title=&quot;The Trusted Advisor&quot;&gt;The Trusted Advisor&lt;/a&gt;&amp;quot; by Maister, Green and Galford.&lt;/p&gt;
&lt;p&gt;Lastly remember that we can improve communication in our teams by starting with ourselves and how we express our own opinions. A good place to start is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/71730.Nonviolent_Communication&quot; target=&quot;_blank&quot; title=&quot;Nonviolent Communication&quot;&gt;Nonviolent Communication&lt;/a&gt;&amp;quot; by Marshall Rosenberg. An older book that&amp;#39;s worth getting hold of to get a different perspective on the way you share feedback is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/2912931-what-did-you-say&quot; target=&quot;_blank&quot; title=&quot;The Art of Giving Feedback&quot;&gt;The Art of Giving Feedback&lt;/a&gt;&amp;quot; by Charles Seashore and Gerald Weinberg.&lt;/p&gt;
&lt;p&gt;I hope these resources help you in situations where you need to go outside your comfort zone. Please do let me know if you have other recommended reading to share that goes beyond coding.&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
        <link>http://rachelcdavies.github.io/2014/12/17/beyond-coding.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/12/17/beyond-coding.html</guid>
        
        
      </item>
    
      <item>
        <title>Workplace Design : Creating a Home from Home</title>
        <description>&lt;p&gt;
	
	&lt;a href=&quot;http://agilecoach.typepad.com/pug.jpg&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;Lola&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd37165c970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37165c970b-120wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;Lola&quot; /&gt;&lt;/a&gt;
	
	
Last week one of our stakeholders brought his pug dog, Lola, along to our product review meeting. “Watch out, she likes feet!” he joked but she remained quiet and well behaved throughout the meeting. Unruly is not the only place I’ve come across where dogs have been accommodated at work, another had a dog basket in their main board room. I appreciate not everyone likes dogs around but I like working for a company that’s not too stuffy to allow people flexibility to make our workplace more homely.&lt;/p&gt;
&lt;p&gt;We’re lucky at Unruly to have a dedicated People &amp;amp; Places team who work closely with our Design team create a work environment that has personal touches. There are many informal meeting places around the building to make collaboration easy and it’s decorated with original artwork &lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a1de970b-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;GoldFramePortal&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd37a1de970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a1de970b-320wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;GoldFramePortal&quot; /&gt;&lt;/a&gt;reflecting our culture. Little things amaze visitors as we show them around, for instance we created a two-way webcam portal between our London and New York office with a gold antique-style frame, which makes it seem more special and echoes Harry Potter where characters move around. What’s the business case? Creating an environment that allows human expression encourages creativity to flourish in our work.&lt;/p&gt;
&lt;p&gt;The design of our workspace is not owned by a central team outside development. We recently reorganised our desks and unlike many companies, where a &amp;quot;Desk Move&amp;quot; is a dreaded logistical nightmare involving packing things up for another team to execute overnight, our developers simply got stuck into disassembling desks and lifting floor tiles themselves to get everything in the right place. Our spirit of &lt;em&gt;&lt;strong&gt;collective ownership&lt;/strong&gt;&lt;/em&gt; and taking responsibility for how our code structured seems to extend out to our surroundings. Taking care of our workspace, isn’t somebody else’s job. &lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a0c1970b-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;DeskMove&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd37a0c1970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a0c1970b-320wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;DeskMove&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Our teams use our walls and whiteboards for practical purposes but with a sense of humour too. Even electronic tools get a bit of customisation, we use Trello for our backlogs and teams can add distinctive backgrounds to make them easier to pick out.&lt;/p&gt;
&lt;p&gt;Teams in bigger companies often find that their boards are the easiest areas to start personalising, when you introduce Kanban boards you can involve everyone on the team in designing the layout. Rather than diving straight in to moving things around, you can create a mini-version of the new layout with sticky notes. I think it’s important to give everyone on the team the opportunity to mull the proposed design over and allow time for tweaks. We’ve taken this approach with how we lay out our boards and our desks (as in the examples below).&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511e75a88970c-pi&quot; style=&quot;display: inline;&quot;&gt;&lt;img alt=&quot;Desklayout&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511e75a88970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511e75a88970c-320wi&quot; title=&quot;Desklayout&quot; /&gt;&lt;/a&gt;&lt;br /&gt; &lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a199970b-pi&quot; style=&quot;display: inline;&quot;&gt;&lt;img alt=&quot;BoardLayout&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd37a199970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd37a199970b-320wi&quot; title=&quot;BoardLayout&quot; /&gt;&lt;/a&gt;I appreciate that many people work in organisations that don’t actively support personalisation of the workspace but you can start small with a potted plant, a team mascot, a little whiteboard artwork. You&amp;#39;ll likely find personal touches are noticed and soon start to spread around surrounding teams. Another small step that you can take is to adopt iteration names or pictures that pick up on what’s going on in the outside world or reflect metaphorically on current mood within the team. In software development, we spend a lot of time in an office environment, taking care of your surroundings helps to take care of the people working within them.&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Jul 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/07/23/workplace-design-creating-a-home-from-home.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/07/23/workplace-design-creating-a-home-from-home.html</guid>
        
        
      </item>
    
      <item>
        <title>Broadening Developer Horizons</title>
        <description>&lt;p&gt;XP is an approach that helps us to deliver valuable software iteratively, to apply it we need to setup our teams to make releasing change to customers as easy as possible. We avoid waiting around for individual team members to make changes, by applying classic XP practices -- Collective Code Ownership and Pair Programming. Each pair of developers is free to change any code that they need to without anyone vetting their changes, they ensure that all tests pass and keep code relatively clean by refactoring as they go. We share knowledge across the team by rotating pairs daily. If a pair runs into difficult decisions regarding design choices, they can call for a huddle with their team mates, sitting together in an open workspace means that&amp;#39;s quick to do. This XP way of developing code is liberating as we can easily make changes in the right place rather than working around organisational barriers. It can be also be humbling, as our code is often improved by other developers as they pass through.
&lt;/p&gt;

&lt;p&gt;To work this way, we find it helps to build teams of extremely capable developers who can work on any area of the codebase rather than hiring a mix of frontend/backend/DBA specialists. Developers who only know enough to work in a single layer of the codebase limit who&amp;#39;s available to pair on the piece of work which is most valuable to pick up next. At Unruly, we only hire “full-stack” developers, this gives us confidence that any pair of developers can work on any area of the codebase (within the products that their team is responsible for) without experiencing hand-offs and delays waiting for developers with a different skill set. It also helps avoid some of the friction that can spark due to single-layer thinking.&lt;/p&gt;

&lt;p&gt;To make collective code ownership easier, some product teams select a homogeneous stack such as Clojure with ClojureScript or JavaScript all the way down using Node. At Unruly, our developers need to be fluent in JavaScript and Java with a smattering of Scala. Full-stack developers are bright people who can keep pace with developments in multiple languages and frameworks rather than immersing themselves in a single core development language. Being a full-stack developer is more than being able to write code in different languages, you have to understand idioms and patterns for UI, middleware, database realms too.&lt;/p&gt;

&lt;p&gt;Being a full-stack developer is also much more than becoming a polyglot programmer. Laurence Gellert’s explains in his &lt;a href=&quot;http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/&quot; target=&quot;_blank&quot; title=&quot;What Is a Full Stack Developer&quot;&gt;blog&lt;/a&gt; that there’s a greater breadth of skills that a “full-stack” developer needs. You’ll need to appreciate the environment that your live system runs within and have the technical chops to be at home with making environment changes. You&amp;#39;ll also need to broaden your horizons beyond thinking about code and get to grips with developing a fuller understanding of the business you work in! Michael Feathers recently gave a &lt;a href=&quot;https://www.skillsmatter.com/skillscasts/5473-the-full-spectrum-developer&quot; target=&quot;_blank&quot; title=&quot;The Full Spectrum Developer&quot;&gt;talk&lt;/a&gt; in London where he used the term “&lt;em&gt;Full Spectrum Developer&lt;/em&gt;” which neatly captures the idea that there&amp;#39;s much more than being able to work across different software layers in a given architecture.&lt;/p&gt;

&lt;a href=&quot;http://rachelcdavies.github.io/&quot; style=&quot;float: right;&quot;&gt;
	&lt;img alt=&quot;Using-laptop-on-snowy-mountain&quot; src=&quot;images/laptopmountain.jpg&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;Using-laptop-on-snowy-mountain&quot; /&gt;&lt;/a&gt;

&lt;p&gt;As the software craftsmanship movement has brought to the fore, serious developers need to take personal responsibility for improving their skills. Of course, becoming a full-stack developer is more than reading the odd business book in your spare time and writing toy programs in obscure languages when you get home from a long day at work. You can also get together with likeminded developers on a regular basis to hone your skills through Code &amp;amp; Coffee sessions outside work and work on pet projects like building games and mobile apps at home. But in my opinion, this only scratches the surface - you will only get to grips with being a full-spectrum developer by working in an environment that allows you to get your hands dirty across the full stack and interact directly with users and stakeholders. Typically these are startups or small companies that practice agile software development. If you take a look at our current &lt;a href=&quot;http://unruly.co/about-us/#work-unruly&quot; target=&quot;_blank&quot; title=&quot;build the platform&quot;&gt;open roles&lt;/a&gt;, you’ll see they’re much broader that you’d typically find in a large corporation.&lt;/p&gt;
	
&lt;p&gt;As an agile coach working with product development teams at Unruly, my focus is on how we can support developers to expand their horizons, to gain a better understanding of our business and how they can help figure out the most valuable software to deliver iteratively. Our developers take responsibility for researching different strands of product development and identify the most valuable ideas to take through to implementation (I&amp;#39;ll write-up more about how we do this in another post soon).&lt;/p&gt;

&lt;p&gt;We also recognise that build learning time into our work week is essential for developers to stay abreast of new tools and frameworks. All of our developers get one day per week to dabble and learn new technologies — see my previous post about &lt;a href=&quot;http://agilecoach.typepad.com/agile-coaching/2014/02/gold-cards-and-viking-helmet.html&quot; target=&quot;_blank&quot; title=&quot;Gold Cards&quot;&gt;Gold Cards&lt;/a&gt;. We recognise that industry conferences can be places where you hear about new trends so developers get three days and an annual allowance to spend on attending any conference they feel is relevant to the personal development at work. Our developers also take turns running weekly coding dojos (during work time not through their lunch) to get hands-on practice time with new languages such as Go, Scala, Rust and mobile phone application development. Developers get the opportunity to share what they learned to other teams through lightning talks and this gives them practice in presenting too. All of these things are ways that organizations can support developers in broadening their horizons while at work rather than eating into their early mornings and evenings.&lt;/p&gt;

&lt;p&gt;There are a few things for developers to weigh up when considering whether to specialise deeply or broaden their horizons. What do you sacrifice when following one path versus rewards to be gained? The main reward for full-spectrum developers is building greater confidence to dive into different technologies; you may spend less time writing code but become more able to deliver end-to-end solutions that hit the spot. As generalists, you likely have a wider choice of companies to work at and are more resilient to industry trends. As specialists, you gain the pleasure of total immersion in a particular sphere of software while you build tolerance to the frustrations of waiting around for others to do their bit. It&amp;#39;s up to you!&lt;/p&gt;

</description>
        <pubDate>Thu, 17 Jul 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/07/17/broadening-developer-horizons.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/07/17/broadening-developer-horizons.html</guid>
        
        
      </item>
    
      <item>
        <title>Good Enough Software Design? Try Testing DX of your Code</title>
        <description>&lt;p&gt;Every day writing code we make many design decisions about naming and encapsulation of functionality. Our primary concern is to express our code in a way that can easily be understood at a later date so changes can be made cleanly. To this end, we&amp;#39;ve learned to organise our code into smaller elements that can be composed neatly to support system behaviours, as where code gets complicated misunderstandings can happen.&lt;/p&gt;
&lt;p&gt;When trying to figure out code quality, developers normally lean on software to analyse code complexity and test coverage. Perhaps we might learn more about how good our design is by starting to apply techniques from UX to measure DX (Developer eXperience)?&lt;/p&gt;
&lt;p&gt;Developers are primary users of our software design, often working across a vast and complex codebase that&amp;#39;s difficult to navigate around. Sometimes our code terrain is too crowded with repurposed junk and other times it&amp;#39;s hard to see the wood for the trees with no easy landmarks to navigate by. We could start to measure how easy the code is for developers to navigate. How long does it take a developer to pinpoint the location of code to change? How many places do they look before finding the relevant areas to change? etc.&lt;br /&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d35505970c-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;Goldfishbowltitle&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511d35505970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d35505970c-200wi&quot; style=&quot;width: 200px; margin: 0px 0px 5px 5px;&quot; title=&quot;Goldfishbowltitle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;My interest in DX was rekindled by a recent discussion at &lt;a href=&quot;http://socratesuk.org/&quot; target=&quot;_blank&quot; title=&quot;International Software Craftsmanship gathering&quot;&gt;SoCraTes&lt;/a&gt; on “What is good software design?”.&amp;#0160; I sighed inwardly when the topic was chosen by the crowd and if I hadn&amp;#39;t been on facilitator duty, I&amp;#39;d probably have skipped the discussion entirely. How wrong I was! I’ll try to sum up the highlights and link to some earlier thoughts I had on topic of DX following a talk at London&amp;#39;s Design Museum on the &lt;a href=&quot;designmuseum.org/signup/newswire/updates-2013-01-28-talks-updates&quot; target=&quot;_blank&quot; title=&quot;Underground Maps Unravelled&quot;&gt;usability of Underground maps&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;br /&gt; &lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d3549f970c-pi&quot; style=&quot;float: left;&quot;&gt;&lt;img alt=&quot;Fish&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511d3549f970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d3549f970c-320wi&quot; style=&quot;margin: 0px 5px 5px 0px;&quot; title=&quot;Fish&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;&amp;#0160;We ran this evening discussion as a &lt;a href=&quot;http://c2.com/cgi/wiki?FishBowl&quot; target=&quot;_blank&quot; title=&quot;Fish Bowl&quot;&gt;Fish Bowl&lt;/a&gt; — you can only comment on the discussion topic, if you are in the &amp;#39;bowl&amp;#39; — 4 chairs at the front. One chair is always kept empty, to allow anyone in the room to jump in with a question or share some relevant information. The &amp;quot;fish&amp;quot; in this photo are: &lt;a href=&quot;https://twitter.com/Chris_Jeffery&quot; target=&quot;_blank&quot; title=&quot;Chris&quot;&gt;Chris Jeffe&lt;/a&gt;&lt;a href=&quot;https://twitter.com/Chris_Jeffery&quot; target=&quot;_blank&quot; title=&quot;Chris&quot;&gt;ry&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mashooq&quot; target=&quot;_blank&quot; title=&quot;Mash&quot;&gt;Mashooq Badar&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Steve_Hayes&quot; target=&quot;_blank&quot; title=&quot;Steve&quot;&gt;Steve Hayes&lt;/a&gt; but many people jumped in and out of our conversation. Here are some of the points that I found most interesting:&lt;/p&gt;
&lt;p&gt;Design is how we layout the code to make it easy to maintain. It may appear that there’s no external impact of software design and it&amp;#39;s pretty intangibe how we evaluate one design over another. However, there are measurable external affects on staff retention, ease of change and developer mood. Corey Haines has been working on &lt;a href=&quot;https://www.mercuryapp.com/&quot; target=&quot;_blank&quot; title=&quot;Mercury App&quot;&gt;Mercury App&lt;/a&gt;, a tool which can be used by a developer to track their mood over time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tooky&quot; target=&quot;_blank&quot; title=&quot;Tooky&quot;&gt;Steve Tooke&lt;/a&gt; mentioned &lt;a href=&quot;https://twitter.com/sandimetz&quot; target=&quot;_blank&quot; title=&quot;Sandi Metz&quot;&gt;Sandi Metz&lt;/a&gt;&amp;#39;s &lt;a href=&quot;http://josericardo.eti.br/2011/09/18/less-path-design-sandi-metz-goruco-2001/&quot; target=&quot;_blank&quot; title=&quot;TRUE&quot;&gt;TRUE&lt;/a&gt; criteria for design judgement&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;ransparent &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;R&lt;/strong&gt;easonable &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;U&lt;/strong&gt;sable &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;E&lt;/strong&gt;xemplary&lt;/em&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd26b229970b-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;Measure&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd26b229970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd26b229970b-320wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;Measure&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We talked about designing for use and as developers are primary users of our code perhaps we should think more about the developers who come after us. &lt;a href=&quot;http://www.exampler.com/ease-and-joy.html&quot; target=&quot;_blank&quot; title=&quot;Brian Marick on Joy&quot;&gt;Brian Ma&lt;/a&gt;&lt;a href=&quot;http://www.exampler.com/ease-and-joy.html&quot; target=&quot;_blank&quot; title=&quot;Brian Marick on Joy&quot;&gt;rick&lt;/a&gt; has summarised good code as that which brings &lt;strong&gt;joy&lt;/strong&gt; to those who come after (users and programmers). Maybe we can aspire to bring joy to developers who read our code months or years after we write it! We could apply techniques from UX practitioners to start measuring accessibility and navigability of our codebases. We could use our findings to identify worst pain points, bringing focus to our cleanup attempts and measure whether working conditions have improved through user testing. &lt;a href=&quot;https://twitter.com/dmitrykandalov&quot; target=&quot;_blank&quot; title=&quot;Dmitry Kandalov&quot;&gt;Dmitry&lt;/a&gt; urged us to &amp;quot;Track everything that developers do!&amp;quot;&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://twitter.com/annajayne&quot; target=&quot;_blank&quot; title=&quot;Anna Jayne&quot;&gt;Anna Jayne&lt;/a&gt; added via #SoCraTesUK twitter stream that we already sort of do in &lt;a href=&quot;http://www.osnews.com/story/19266/WTFs_m&quot; target=&quot;_blank&quot; title=&quot;WTF per min&quot;&gt;WTFs per min&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;All this reminded me that I had some similar thoughts about measuring DX last year. My fascination for maps took me to London’s Design Museum to hear a talk by cognitive psychologist, Maxwell Roberts, who has been measuring the &lt;a href=&quot;http://now-here-this.timeout.com/2013/02/18/going-deeper-underground-max-roberts-discusses-the-future-of-the-tube-map-at-designmuseum/&quot; target=&quot;_blank&quot; title=&quot;Future of the tube map&quot;&gt;effectiveness of different layouts of underground maps&lt;/a&gt;. I thought the same approach might be used to assess the accessibility of different software designs/architectures, sort of UX from a programmer perspective. &lt;br /&gt;&lt;br /&gt;I also heard at SoCraTes that DX of API’s is already being tested see this &lt;a href=&quot;http://blog.pamelafox.org/2011/04/what-makes-good-developer-experience.html&quot; target=&quot;_blank&quot; title=&quot;What Makes Good DX&quot;&gt;post&lt;/a&gt; from Pamela Fox and Jeremiah Lee has also run some workshops on &lt;a href=&quot;http://dx.jeremiahlee.com/&quot; target=&quot;_blank&quot; title=&quot;The UX of API&amp;#39;s&quot;&gt;DX&lt;/a&gt; at SXSW and Fluent conf&lt;br /&gt;&lt;br /&gt;At the Design Museum, Maxwell talked about &amp;quot;information pollution&amp;quot; and how we want to reduce cognitive load for users in processing what they see in front of them. It also helps if a map doesn&amp;#39;t significantly conflict with their mental model of the actual topography of the city. Clearly cognitive load must be a big factor in understanding the software design, as we try to figure out where to insert behaviours into a software system. Although we try to use meaningful names to help make code self-explanatory perhaps when a developer is confronted train wreck of long names in a literal programming style iit actually makes it harder to see the structure than using shorter names. We could test this kind of thing using DX. &lt;br /&gt;&lt;br /&gt;Also the comparison of a underground map and city topography (people find London underground map easier when the Thames river is shown) might be similar to the software architecture/metaphor matching to real-world domain.&lt;br /&gt;&lt;br /&gt;Maxwell&amp;#39;s point was that people often use same design rules without thinking about whether they are the best possible for the problem. He&amp;#39;s a proponent of a UX technique - &lt;strong&gt;Evidence Based Information Design&lt;/strong&gt; and has been doing testing of different underground map designs for the same city (octolinear/hexalinear vs curves, etc). He takes objective measures: how long does it take a user to do X? Where X might be station finding or journey planning. He also takes subjective measures: how to users rate the map? which map would they choose?&lt;br /&gt;&lt;br /&gt;His findings are interesting. Subjective measures on aesthetics don&amp;#39;t correlate with which map is quicker to use. People like designs which seem familiar even though tests show that other designs are quicker to navigate. I thought of how conventional/familiar coding styles put developers at ease even though actual design may be a bad fit for a problem.&lt;br /&gt;&lt;br /&gt;His design principles for maps were:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Coherence (shape/structure)&lt;/li&gt;
&lt;li&gt;Balance&lt;/li&gt;
&lt;li&gt;Harmony&lt;/li&gt;
&lt;li&gt;Topography alignment&lt;/li&gt;
&lt;li&gt;Reduce supplementaty info&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;When we create maps we want to map topography and reveal structure but we may need to discard current conventions to do so. We should beware following tradition without theory about why it&amp;#39;s being applied to this particular problem. For underground maps, people are too hooked on octolinear style (following early success of London underground map in 1930&amp;#39;s) but other styles are better for different city geographies. Perhaps in software development we are too used to OOD conventions to see that this can obscure design.&lt;br /&gt;&lt;br /&gt;One of the last points made in our discussion at SoCraTes is one from &lt;a href=&quot;http://en.wikipedia.org/wiki/Christopher_Alexander&quot; target=&quot;_blank&quot; title=&quot;Christopher Alexander&quot;&gt;Christopher Alexander&lt;/a&gt;, whose work on architectural patterns inspired many software developers to mine design patterns for software. Apparently Alexander’s advice to the software community at an OOPSLA conference was &lt;em&gt;“Don’t extract the humanity”&lt;/em&gt; and perhaps by starting to test DX this could be a start of putting developers to the forefront of evaluating good design practice. Let’s try to write better code for the developer who comes after us by testing developer reactions now.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Jun 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/06/27/good-enough-software-design-try-testing-dx-of-your-code.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/06/27/good-enough-software-design-try-testing-dx-of-your-code.html</guid>
        
        
      </item>
    
      <item>
        <title>The Folly of Scaling Agile</title>
        <description>&lt;p&gt;I’m jotting down a few notes on Scaling Agile software development as Bucharest Agile group invited me to talk about doing this. I have already warned them that I am very skeptical about attempts to apply agile practices on large endeavours. While preparing for our conversation, I thought it might be helpful for me to blog about the reasons why I’m not a fan of Scaling Agile as this may make our conversation easier to follow and help the group to come up with some questions.&lt;br /&gt;&lt;br /&gt;When we apply Agile principles, we strip away process so that software developers can work more collaboratively with business people to identify what is the most valuable thing for them to deliver next. We focus on building working software and releasing as early as we can to help us figure out what to build based on feedback from users. Working this way is much harder when a lot of people are involved!&lt;br /&gt;&lt;br /&gt;A bunch of things break down as you scale up. The biggest one is not being able to maintain interpersonal relationships through which rich information flows, these are replaced with weaker lossy forms of communication and misunderstandings about what is the right thing to build next follow.&lt;/p&gt;
&lt;p&gt;Typical things that become difficult at scale are access to business people and infrastructure controlled by others outside immediate team. Meetings get long and tedious, we start sending a representative from each team, which introduces more secondhand information, emails and documentation.&lt;/p&gt;
&lt;p&gt;When a project is big and is being changed by many hands it becomes much harder to understand the whole, we start to introduce hierarchy with a select few looking at the bigger picture and paying attention to separating concerns to allow different teams to work in parallel. As a result, choice is removed from the team and it can feel in teams that edicts come down from on high through a series of chutes and screens that mask the reasoning behind them.&lt;br /&gt;&lt;br /&gt;Often the initial attraction of Agile approaches to a business is to reduce delivery timescales and enable developers to work faster with a lightweight approach. Working in small teams allows individuals to feel more engaged because they have some influence on how things are built. When a lot of people are working in parallel coordination becomes harder. Ideally we need skilled people who have enough experience to work independently without the guide-rails of process. &lt;br /&gt;&lt;br /&gt;Yes, I have seen plenty of organisations with large systems being maintained, expanded and extended by multiple teams. When each team has to interface to many others decisions take longer to make. Where a large number of people are working on a complex thing, it takes a lot of effort to keep up with what’s happening other areas and most reduce their focus to the work at hand. Once they reduce their focus and interfaces between teams become walls to hide behind. When myopia is easier then teams tend to make local suboptimal changes rather than considering the whole.&lt;br /&gt;&lt;br /&gt;A large body people working on a large body of code often feels crazily chaotic or oppressively bureaucratic to work within. In these conditions developer motivation is often dimmed, people leave taking away valuable knowledge of how the system evolved and why things are. New people who need to learn how things work join and struggle to make sense of it all, the situation gets worse. &lt;br /&gt;&lt;br /&gt;There are a few agile practices that can help in scaled up situations - such as having reliable automated builds, decent test coverage and teamwork but these are also painful to maintain with a lot of people involved. I’ve seen many large organisations attempt to apply Agile at scale. It’s hard and although it can bring more humanity to work in-the-small, I’m not sure there is much evidence that it is actually better than traditional ways of organising the work.&lt;br /&gt;&lt;br /&gt;I appreciate that there are large systems out in the world that need to be supported and evolved to better meet user and business needs. I remain unconvinced that throwing a lot of people at the problem makes things any faster. I believe deadlines driving this behaviour are defined without realising the impact on the maintainability and quality of existing software. Code is an asset and so is the knowledge that software developers carry - businesses can run into costly mistakes if they ignore their value.&lt;br /&gt;&lt;br /&gt;Attempting to scale to go faster is driven business greed and ambition - not a bad thing in the commercial world but it’s like seeing a someone blindfold attempting to run along a cliff edge while juggling priceless antique glass vases. Mistakes at scale are costly!&lt;/p&gt;
&lt;p&gt;When it seems that scaling up is the only way to go, challenge yourself to think of a smaller simpler thing to build sooner that gives faster feedback. Try to limit your total Work-In-Progess by reducing the amount of development being done in parallel across the organisation. When a smaller group of people is involved in development, choices about which way to go next can be made more quickly and there&amp;#39;s less waiting around. Ultimately, this goes back to Agile Manifesto values - focus on better interactions betweem individuals to produce valuable software sooner -- not on a process to enable lumbering projects at scale.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Jun 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/06/19/the-folly-of-scaling-agile.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/06/19/the-folly-of-scaling-agile.html</guid>
        
        
      </item>
    
      <item>
        <title>Conference Club</title>
        <description>&lt;h4 id=&quot;ConferenceClub-%27...thefirstruleofConferenceClubistotalkabouttalkingatConferenceClub...%27&quot;&gt;&lt;em&gt;&amp;quot;The first rule of Conference Club is to talk about talking at conferences&amp;quot;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Presenting at conferences is a great experience where you get to consolidate your knowledge and connect with other people passionate about the same things. But speaking in front of your peers can be a scary prospect for developers and they often underestimate the value to others of what they know. For instance in our teams, we have lots of experience&amp;#0160;with XP, Continuous Delivering, UX and JS testing frameworks. Does that mean we&amp;#39;re all experts? Not necessarily but we can share practitioner experiences and that&amp;#39;s a valuable to people who&amp;#39;re only just getting started with new approaches.&lt;/p&gt;
&lt;p&gt;Back in January, I started a lunchtime meeting called &amp;quot;Conference Club&amp;quot; for anyone in our team who wanted to learn more about the steps they need to take to present at industry conferences. Five months later, I&amp;#39;m pleased to see that several of the people who came along have submitted sessions to calls for participation and been accepted as speakers.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2014-05-27 at 17.34.21&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a73dcc4f5f970d img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a73dcc4f5f970d-320wi&quot; style=&quot;margin: 0px 5px 5px 0px;&quot; title=&quot;Screen Shot 2014-05-27 at 17.34.21&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alex and Benji presented on &lt;a href=&quot;http://vimeo.com/channels/pipelineconf/96233529&quot; target=&quot;_blank&quot; title=&quot;Scaling Continuous Delivery&quot;&gt;&amp;quot;Scaling Continuous Delivery&amp;quot;&lt;/a&gt; at Pipeline conference in London&lt;/li&gt;
&lt;li&gt;Vikki presented a &lt;a href=&quot;http://2014.jsday.it/talk/if-you-like-it-then-you-should-have-put-a-test-on-it-a-comparison-of-front-end-acceptance-testing-frameworks/&quot; target=&quot;_blank&quot; title=&quot;comparison of front-end acceptance testing frameworks&quot;&gt;comparisonof front-end acceptance testing frameworks&lt;/a&gt;&amp;#0160;at JsDay in Verona&lt;/li&gt;
&lt;li&gt;Arber will be presenting on &amp;quot;Extreme Product Development&amp;quot; at &lt;a href=&quot;http://agilenorth.org/2014-conference/&quot; target=&quot;_blank&quot; title=&quot;Agile North&quot;&gt;Agile North&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mike will be presenting on &amp;quot;&lt;a href=&quot;http://sched.co/1eEp8RW&quot; target=&quot;_blank&quot; title=&quot;Zombie Persona Apocalypse&quot;&gt;Zombie Personas&lt;/a&gt;&amp;quot; at Agile2014.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We only had a few meetings of Conference Club but it was enough to explore people&amp;#39;s worries and share some practical tips on how to get over them.&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-size: 1.17em;&quot;&gt;Basic Steps&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;TOPIC: Identify topics you are interested in and know something about&lt;/li&gt;
&lt;li&gt;BIO: Update your profile on LinkedIn / GitHub / blog / Twitter to reflect your interest/experience&lt;/li&gt;
&lt;li&gt;WHERE: Find meetups / conferences that might people go along to discuss that topic which have open space or CFP (call for participation)&lt;/li&gt;
&lt;li&gt;DATES: When do you need to submit a proposal by, these can be upto 6 months before the conference date&lt;/li&gt;
&lt;li&gt;FORMAT: consider what format is best fit for you and conference (workshop, talk, experience report, etc)&lt;/li&gt;
&lt;li&gt;PREPARE: design material slides or exercise to lead session participants through subject of interest.&lt;/li&gt;
&lt;li&gt;PROPOSE: put forward your idea to organisers&lt;/li&gt;
&lt;li&gt;PRACTICE: do a run thru of session with small group to work out any glitches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One basic thing that speakers need to do is practice so we have a fortnightly lightning talks forum that can be used to build confidence speaking to an audience. Unconference events are also great places to explore a topic as you figure out what you want to present to a wider audience.&lt;/p&gt;
&lt;h3&gt;Homework Assignments&lt;/h3&gt;
&lt;p&gt;1)&amp;#0160;Write a bio for someone else at the meeting using Scott Berkun&amp;#39;s tips on &lt;a href=&quot;http://scottberkun.com/2013/how-to-write-a-good-bio/&quot; target=&quot;_self&quot; title=&quot;How to Write a Good Bio&quot;&gt;how to write a good bio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2) Prepare an answer to one of the following questions from&amp;#0160;&lt;a href=&quot;http://www.noelrappin.com/railsrx/2014/1/18/conference-prompts-or-how-to-submit-proposals-and-influence-people&quot; rel=&quot;nofollow&quot;&gt;Noel Rappin&amp;#39;s blog&amp;#0160;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3) Write an abstract for a new session you&amp;#39;d like to propose for a user group or conference.&lt;/p&gt;
&lt;h4&gt;&lt;span style=&quot;font-size: 1.17em;&quot;&gt;Useful Blogs&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://janogonzalez.com/2013/12/02/conference-speaking-how-to.html&quot;&gt;Conference speaking HOW-TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jenmyers.net/confessions-of-a-semi-amateur-speaker.html&quot;&gt;Confessions of a Semi-Amateur Speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://christianheilmann.com/2012/09/05/de-bricking-yourself-starting-out-as-a-speaker/&quot;&gt;Debricking yourself as a speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plg.uwaterloo.ca/~migod/research/beckOOPSLA.html&quot;&gt;Kent Beck on how to write a conference abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote/&quot;&gt;Chad Fowler on&amp;#0160;how to give a keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ladiesintech.com/sara-wachter-boettcher-fights-a-cheetah/&quot;&gt;Podcast on slowing down pace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriouspony.com/blog/2013/10/4/presentation-skills-considered-harmful&quot;&gt;Presentation Skills Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://speaking.io/&quot;&gt;http://speaking.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7059303&quot;&gt;https://news.ycombinator.com/item?id=7059303&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linkedin.com/today/post/article/20140107225219-172811-presenters-don-t-go-the-way-of-michael-bay&quot;&gt;http://www.linkedin.com/today/post/article/20140107225219-172811-presenters-don-t-go-the-way-of-michael-bay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.duarte.com/blog/public-speaking-for-introverts-6-essential-tips&quot;&gt;http://www.duarte.com/blog/public-speaking-for-introverts-6-essential-tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/publicspeak&quot;&gt;https://www.coursera.org/course/publicspeak&lt;/a&gt;&amp;#0160;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.presentationzen.com/presentationzen/2014/01/dealing-with-presentation-anxiety-stage-fright.html&quot;&gt;Dealing with stage fright&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.garrreynolds.com/Presentation/pdf/presentation_tips.pdf&quot;&gt;Presentation Zen summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sixminutes.dlugan.com/vocal-variety-speech-breathing/&quot;&gt;Breathing for voice projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ynmemxQicQk&quot;&gt;How to project your voice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://speaking.io/&quot;&gt;http://speaking.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=hRdDdS5aZMM&quot;&gt;Triangle Method for eye contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.annashipman.co.uk/jfdi/conference-speaking.html&quot;&gt;http://www.annashipman.co.uk/jfdi/conference-speaking.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weareallaweso.me/&quot;&gt;http://weareallaweso.me/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rckbt.me/2014/01/conference-proposals/&quot;&gt;http://rckbt.me/2014/01/conference-proposals/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seb.ly/2014/05/how-to-ask-to-get-paid-to-speak/&quot;&gt;http://seb.ly/2014/05/how-to-ask-to-get-paid-to-speak/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#0160;I also recommend following &lt;a href=&quot;https://twitter.com/callbackwomen&quot; target=&quot;_blank&quot; title=&quot;Callback Women&quot;&gt;Callback Women&lt;/a&gt; to pick up upcoming call for participation.&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;

</description>
        <pubDate>Tue, 27 May 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/05/27/conference-club.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/05/27/conference-club.html</guid>
        
        
      </item>
    
      <item>
        <title>Developer Exchange</title>
        <description>&lt;p&gt;Last year Unruly ran a Developer Exchange with 7digital. We&amp;#39;re both companies with similar levels of experience in XP/agile development but working in different technology stacks. Our aim was to provide a mutual learning experience and pickup some ideas for improving the way we work by seeing how another company does things. &lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511e21aa0970c-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;DeveXchange&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511e21aa0970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511e21aa0970c-320wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;DeveXchange&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;What we did was to arrange for a developer swap -- Imran a Java developer from our team went over to work at 7digital for a week then Raoul a web developer came over to work with our teams for a week. The swap was staggered so we did not swap Imran and Raoul on the same week. Each developer had the opportunity while they were at the host company to pair with developers on different teams. They were also welcome to&amp;#0160;attend team meetings such as standups, planning and retrospectives. Imran even facilitated a few of retrospectives at 7digital.&lt;/p&gt;
&lt;p&gt;It was helpful for Unruly to swap with 7digital as we were approaching a point where we were about to split a large team that worked on a monolithic application and 7digital had already implemented something similar. I think 7digital were interested to see how we approach our Continous Deployment and approach to product development.&lt;/p&gt;
&lt;p&gt;Now that a year has elapsed, we&amp;#39;re planning to do another Developer Exchange with 7digital.&amp;#0160;Unruly is also looking to do this with some other companies, such as Red Gate and Mendeley.&lt;/p&gt;
&lt;p&gt;A prerequisite for us is that the exchange partner has developers who already practice XP to enable pairing. It&amp;#39;s less important to be using the same technology, our developers are used to working across full stack from front-end to database. We have three teams to pair with and an assortment of languages and frameworks including:- Java, Tomcat, Spring, Play, Javascript, Angular, Node, Grunt, Mocha, Vectorwise, Postgres, Hibernate, Cassandra, Puppet, Cascading, Mockito, DbUnit, Jasmine.&lt;/p&gt;
&lt;p&gt;So if your company are already experienced XP practitioners and the idea of a swap sounds interesting to you, please get in touch.&lt;/p&gt;

</description>
        <pubDate>Mon, 12 May 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/05/12/developer-exchange.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/05/12/developer-exchange.html</guid>
        
        
      </item>
    
      <item>
        <title>No Magic Words</title>
        <description>&lt;p&gt;I gave a talk at &lt;a href=&quot;http://www.meetup.com/ACE-Agile-Coaching-Exchange/&quot; target=&quot;_blank&quot; title=&quot;Agile Coaches Exchange&quot;&gt;Agile Coaches Exchange meet up&lt;/a&gt; yesterday and someone emailed afterwards saying&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&amp;quot;Rachel mentioned about few questions that she &amp;#0160;uses during one on one. Those set of questions could help me a lot because I am terrible to start and flow the conversation with my team.&amp;quot;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;So I thought it might be handy to do a quick write-up of what questions I tend use in individual coaching sessions. &amp;#0160;&lt;/p&gt;
&lt;p&gt;Well just to be clear,&amp;#0160;I don’t follow an exact format or set list of questions -- I’ve been coaching for so long that questions seem to come burbling out of my mouth without much premeditation or forethought. Here&amp;#39;s what I think I ask but this might actually differ a lot depending on the person or current issues.&lt;/p&gt;
&lt;p&gt;Before we head off to our meeting, I check “Is now a good time for you?” and I’m fine to move to another time or skip the meeting.&amp;#0160;&lt;strong&gt;Coaching is always optional.&lt;/strong&gt;&amp;#0160;&lt;/p&gt;
&lt;p&gt;Once we sit down, I tend to start with open questions like:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“How are you doing?”&lt;/li&gt;
&lt;li&gt;“Are things going well at the moment?”&lt;/li&gt;
&lt;li&gt;“Are there any issues you want to discuss?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This tends to open out topic areas that we kick around -- discussing root causes , trying to see events from other perspectives and identifying possible courses of action.&lt;/p&gt;
&lt;p&gt;I also look back in my notebook to see whether we talked about any specific issues at our last meeting:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“Last time we discussed pair rotation in your team, is that working better now?” or&lt;/li&gt;
&lt;li&gt;“You facilitated a retrospective for the ABC team last week, how do you think that went?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If they led a meeting, I ask if they’d like any feedback from me.&lt;/p&gt;
&lt;p&gt;I might also mention current events such as team or process&amp;#0160;changes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&amp;quot;We have a new developer joining your team next week, have you thought about how she&amp;#39;s going to get to know the system?&amp;quot;&lt;/li&gt;
&lt;li&gt;&amp;quot;We&amp;#39;ve changed the story time meeting format to run it with both teams together, how do you think that&amp;#39;s working out?&amp;quot;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If the conversation dries up then we move onto specific areas such as personal development:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“What research projects/Gold Cards have you been working on lately?”&lt;/li&gt;
&lt;li&gt;“Got any plans to give a lightning talk about that next week?”&lt;/li&gt;
&lt;li&gt;“You mentioned that you were planning to submit for XYZ conference, have you sketched out an abstract?”&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I usually check at the end “Are there any other things you wanted to discuss?” and let them know that I’m around to discuss further any time.&lt;/p&gt;
&lt;p&gt;There are no magic words or special incantations that I’m aware of. The main thing is to focus on what the other person has to say and try to listen carefully to what they’re experiencing and changes they wish for. I care about whether they’re happy at work and hope that talking will help them stop worrying about things that are holding them back and start acting on their concerns and ideas.&lt;/p&gt;

</description>
        <pubDate>Thu, 17 Apr 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/04/17/no-magic-words.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/04/17/no-magic-words.html</guid>
        
        
      </item>
    
      <item>
        <title>Calculating Velocity FAQ</title>
        <description>&lt;p&gt;Sometimes people get confused about velocity and edge cases of what gets counted or not. It doesn&amp;#39;t matter greatly except it helps to do this consistently over time. I wrote a FAQ for our teams because these edge cases come up infrequently and developers often don&amp;#39;t remember what rule to apply. I&amp;#39;m sharing a slightly&amp;#0160;abbreviated version of our Velocity FAQ as an illustration of working agreements around this. Your team might choose to do this differently and that&amp;#39;s okay.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;The purpose of this FAQ is to clear up any confusion about counting team velocity before story prioritisation. &amp;#0160;We average our velocity over past 3 iterations to level things out. Also we make adjustments if we know that team members will be on holiday during the next iteration.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;1) Should I partially count a story if we did some work on it but it hasn’t been finished?&amp;#0160;&lt;strong&gt;No&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;2) Should I count a story if the code is all live but we haven’t had the story approved by stakeholders or sent out the release email?&amp;#0160;&lt;strong&gt;No because sometimes more work is discovered through doing this.&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;3) If we extended or shortened the iteration should I adjust the velocity to match the usual iteration length?&amp;#0160;&lt;strong&gt;Yes&lt;/strong&gt;.&amp;#0160;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;4) If the story was signed off and complete and then later we discover it has problems, Should we add another story for the extra work to fix it?&amp;#0160;&lt;strong&gt;No. If the implementation has a bug or we broke or clearly failed to deliver on the story we will fix it without an additional story, even if it was accidentally signed off.&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;5) My stakeholder says that she really wanted something extra than the story we’ve developed. Do we expand the story to do the extra things?&amp;#0160;&lt;strong&gt;No, this can be a new story if wasn’t agreed with other stakeholders. It helps to note the acceptance criteria clearly in the story and check them with stakeholders before starting work on development.&lt;/strong&gt;&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;6) We had to do some story work in an iteration that wasn&amp;#39;t planned in because the story was not finished from a previous iteration (due to any reason including dependency on other team). What do we do?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Step 1: Send stakeholder email or let them know in planning that this is happening and may impact stories currently lined up for current iteration.&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;Step 2: Fix the problem and then count the full estimate of the original story when its finished in the current iteration&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;Do not create an extra story for the remainder of the work and estimate it as extra work as this will result in artificially inflating the velocity.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;7) We did an extra piece of work it took about 2 points worth, it was never planned in or estimated can I count it now because we did do it?&lt;/p&gt;
&lt;p dir=&quot;ltr&quot;&gt;&lt;strong&gt;No. New pieces of work even if they come up mid-iteration, even if they are ultra urgent and should be done immediately should always be discussed, broken down and estimated BEFORE we start work on it. We need to warn stakeholders we are putting it in. So this situation should never ever arise that you only estimate a story after you completed it! If it does happen you should not count it. and discuss what went wrong in the process.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;

</description>
        <pubDate>Wed, 09 Apr 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/04/09/calculating-velocity-faq.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/04/09/calculating-velocity-faq.html</guid>
        
        
      </item>
    
      <item>
        <title>Estimates Considered Useful</title>
        <description>&lt;p&gt;Despite the current &lt;a href=&quot;http://www.infoq.com/interviews/zuill-mob-programming&quot; target=&quot;_blank&quot; title=&quot;NoEstimates&quot;&gt;#NoEstimates&lt;/a&gt; trend, at Unruly we still estimate our user stories. The way we do this is in small &lt;a href=&quot;http://agilecoach.typepad.com/agile-coaching/2013/10/evolving-estimation-process.html&quot; target=&quot;_blank&quot; title=&quot;evolving estimation process&quot;&gt;informal meetings&lt;/a&gt; in our development area. Why do we find this useful? Because estimates of development costs inform decisions on what to develop next.&lt;br /&gt;&lt;br /&gt;At Unruly our teams are all working on multiple product streams. We don’t have long-term project or release plans. We deploy features as soon as we can rather than to hit a release date. We agree the next set of priorities with our product stakeholders every few weeks. The team makes a proposal of what seem to be the most valuable stories to work on next and we also offer our stakeholders a list of alternative options as estimated stories. There’s a bit of shuffling in the meeting, which typically takes less that 30 mins. We are not making a commitment to deliver exactly those stories as something more important may come up.&lt;/p&gt;
&lt;p&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511989dd6970c-pi&quot; style=&quot;float: left;&quot;&gt;&lt;img alt=&quot;Spam&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511989dd6970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511989dd6970c-320wi&quot; style=&quot;margin: 0px 5px 5px 0px;&quot; title=&quot;Spam&quot; /&gt;&lt;/a&gt;&lt;br /&gt;&lt;br /&gt;As we whittle down our proposed list of best value stories in the lead-up to story prioritisation with stakeholders, developers make two kinds of estimate. A rough “ballpark” given by a lone developer is used to figure out whether to bin the idea or do further investigation. A “full estimate” is given by the team when the developer investigating that story has gathered enough information to bring a proposal to the team. We only put full estimates on stories that are strong contenders to present to stakeholders for next iteration.&lt;br /&gt;&lt;br /&gt;I wonder if #NoEstimates approach is effective when there’s no significant value tradeoff being made around strands of work (sets of small user stories) and that we find estimates useful because we’re looking for the most valuable stories each time and development cost is a part of that. I think it’s because we’re in a #NoProjects context that we find estimates useful, I’d be interested to hear your thoughts on this.&lt;/p&gt;

</description>
        <pubDate>Mon, 07 Apr 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/04/07/estimates-considered-useful.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/04/07/estimates-considered-useful.html</guid>
        
        
      </item>
    
  </channel>
</rss>
