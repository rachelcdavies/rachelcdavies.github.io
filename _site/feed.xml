<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thoughts on Agile Coaching</title>
    <description>Thoughts on Agile Coaching
</description>
    <link>http://rachelcdavies.github.io/</link>
    <atom:link href="http://rachelcdavies.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Fri, 01 May 2015 08:14:16 +0100</pubDate>
    <lastBuildDate>Fri, 01 May 2015 08:14:16 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Making Time To Tend Code</title>
        <description>&lt;p&gt;A question that software developers everywhere struggle with is how to make time to get things done in their codebase. Agile approaches seem to be mostly about piling in more features. Any developer knows there’s a ton of work not directly tied up with these new features. Often it seems developers are left trying to beg, borrow or steal time to take care of tasks that are hard to explain to non-technical people with haphazard results. Being driven to deliver more features while sidelining their concerns has the effect of making developers feel like second-class citizens with no voice. Agile process being used as a stick to beat developers is a sad state of affairs but there are ways that Agile process can also be used by developers to create protected time for work they need to get done.&lt;/p&gt;

&lt;p&gt;Codebases are in some ways like gardens, to continue to be fruitful, they must be tended with care. Garden plants don’t stay the same shape, as time passes they grow in all directions eventually dying back to make room for others. Code also grows in different directions over time and as patches of code start to yield less business value we need to consider removing them. To walk easily around your garden, you have to cut back stray branches and sweep up to keep paths clear. Like gardeners, software developers need time to prune sprawling code, thin out overcrowded components and tease out new services so they may flourish. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/Wheelbarrow.jpg&quot; alt=&quot;Wheelbarrow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In my experience, Scrum-style planning tends to focus team effort on developing user facing features that can easily be explained to business stakeholders. Extending the gardening metaphor, the items that appear in our backlogs are like new garden features – plant a fruit tree so we have apples, install a shed so we can keep our tools safe, create a stunning herbaceous border in the front so we can make our neighbours envious, etc. Sprint planning doesn’t cover time for weeding the existing flower beds, raking up dead leaves, removing an ants nest that’s making the patio unusable. Developers need time to stay on top of technical maintenance alongside development of new features. Although a Scrum team should be able to add technical tasks to their backlog, typically the focus of a sprint is meeting the sprint goal, delivering all the shiny new features that will generate business value. &lt;/p&gt;

&lt;p&gt;Developers often grumble that there’s not enough time in a sprint to stay on top of the technical tasks. I’m talking about things that no stakeholder will ask for. For example, tidying up deployment scripts, new browser VMs for testing, upgrading to the latest release of something. Nearly always code tending tasks can be deferred over delivering more features. When we decide to put them off, we may also be increasing the work needed to sort them out. Anyone who has ever had a lawn knows grass grows fast in the springtime – you need to get out with your mower every week or you’ll soon regret it. Leave the grass until it’s knee high, you have to use a strimmer. Strimming long grass takes a lot longer than mowing and leaves the grass looking roughly hacked back. Putting off care for your lawn turns a simple task into a laborious one. &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/strimming.jpg&quot; alt=&quot;Strimming&quot; /&gt;&lt;/p&gt;

&lt;p&gt;To ensure more time is available to improve our software systems, developers may try to make code tending work visible to their business stakeholders as “technical stories”. We recently created a technical story to cover a rewrite of a stats pipeline to handle higher volumes of data. However, there are so many mundane tasks that it doesn’t make sense to expose a large stream of technical stories to stakeholders unless it’s going to seriously impact delivery of new features. Most Scrum teams have a bunch of technical tasks in their sprint backlog jostling for time alongside work on new features. When work on features and technical tasks is lumped together into a single line on a burndown chart and aggregated into team velocity, it’s really hard for any team to get the balance between these types of work right.&lt;/p&gt;

&lt;p&gt;Inspired by a Kanban technique, separating out different &lt;em&gt;Classes of Service&lt;/em&gt; for feature development over support changes, I encouraged our XP teams at &lt;a href=&quot;http://tech.unruly.co&quot;&gt;Unruly&lt;/a&gt; to separate out different types of work on their team boards. This enables our teams to balance their capacity across the different types of work: features, tech tasks, support, research. Doing this helps us maintain momentum on all of these different types of work. Sounds a bit complicated? Making different kinds of work more visible helps us not to neglect one kind of work over another.&lt;/p&gt;

&lt;p&gt;We use different colour cards to represent different types of work. We use white cards for stories and green cards for code tending work. We try to do refactoring as part of stories but sometimes we stumble across bigger issues that can be done later as green cards. How do we make time to do these green cards? Well the secret of XP is that we just do them. We only include work on stories in our velocity. Excluding green cards from our velocity means that it only represents our likely capacity for prioritising the new stories. Now we have time to keep working on a steady stream of code tending tasks. Our business stakeholders are happy with this because we keep delivering new features and they don’t have to wrestle with trying to understand the priority of the technical stuff that we need to do to maintain our codebase.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/OldTabascoBoard.jpg&quot; alt=&quot;Green Cards on the Board&quot; /&gt;&lt;/p&gt;

&lt;p&gt;All of our teams use simple tracking mechanisms to ensure that we maintain a balance between new features and technical improvement work. One team does &lt;a href=&quot;http://rachelcdavies.github.io/2014/03/03/dot-counting.html&quot;&gt;dot counting&lt;/a&gt;. Other teams keep an area on their whiteboard for tracking where their time goes. They have their own system of coloured magnets and hieroglyphs. These trackers are updated by the team at standup time so we spot if we’re not striking the right balance. We later take photos of them to review in our team retrospectives.&lt;/p&gt;

&lt;p&gt;Each team prioritises their green cards weekly. To figure out which tasks are most important, we ask whether doing this work help us deliver value to our business in the coming weeks. As one of our team leads puts it  &lt;em&gt;“does this make our real days closer to ideal days?”&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/GreenCardPrioritisation.jpg&quot; alt=&quot;Green Card Prioritisation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Yes, there are busy times when we feel the right thing to do is deliver more customer facing features over technical tasks. But often our system will force us to put on the brakes. Neglecting technical tasks will eventually slow us down – our tests take longer to run, it takes more time to deploy, developer motivation is sapped. We may even lose developers who are fed up with working around an ageing technology stack.&lt;/p&gt;

&lt;p&gt;Setting aside time to tend our code is essential for us to maintain fruitful software assets. Start by making technical tasks visible to your team. Prioritise these tasks so that the team works on the ones that will yield most benefit. At standup, consider as a team, what effort should be put on code tending tasks today. Keep track how much time you spend on code tending, this can help you strike the right balance against business facing features. Reflect together as a team on how code tending is going.&lt;/p&gt;

&lt;p&gt;You may wonder whether putting prioritisation of technical tasks in the hands of developers leads to business priorities being ignored. We prefer to consider that our developers are taking on more responsibility and accountability for protecting our software as a business assets. We also find this way of working helps developers keep their code bases pleasant and easy to work in.&lt;/p&gt;
</description>
        <pubDate>Thu, 30 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2015/04/30/time-to-tend-code.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2015/04/30/time-to-tend-code.html</guid>
        
        
      </item>
    
      <item>
        <title>Who&#39;s Afraid Of Conway&#39;s Law?</title>
        <description>&lt;p&gt;You may have heard about Conway’s Law &lt;em&gt;“Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.”&lt;/em&gt; I’m guessing you already had some inkling that how we organise our teams has implications for the shape of our software. It’s pretty normal to divide up teams by the parts of the system they’re responsible for. Most organisations can and do spin up new teams to match their ongoing initiatives. &lt;/p&gt;

&lt;p&gt;So why might Conway’s Law be something to watch out for? Well, it’s not so much that our org chart impacts system architecture and that re-orgs are slow to execute. Communication actually happens between individuals within an organisation. The quality of communication is impacted by factors like location, personality and the medium of conversation (email, chat, in-person, etc). Even when there’s no barrier to talking, sometimes it’s hard to be heard in conversations with busy people or someone who has very different interests.&lt;/p&gt;

&lt;p&gt;Taking this into consideration, our stated reasons may not be the real reasons, for code to be in one place over another. Our decisions about where to put code reflect what we know about the wider system. Under time pressure, we may also weigh convenience for ourselves over convenience for others in such decisions. Design decisions in the small can have an impact on the system in the large. Although an organisation usually plans around a “big picture” architecture, it’s likely that this view is being eroded by tiny transgressions made every day – over time the effect of Conway’s Law is that it becomes harder to make changes to the system. &lt;/p&gt;

&lt;p&gt;As we move into a world that embraces Lean/Agile thinking, we want to be able to pivot and to make swift changes to a system, as we chase an evolving market. Conway’s Law makes this hard because the actual design produced reflects the reality of our communication structure. Simple changes end up touching more places than strictly necessary (like a scaled up version of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Shotgun_surgery&quot;&gt;Shotgun Surgery&lt;/a&gt; anti-pattern). When the system needs to be changed, meetings ensue between people with vested interests in parts of the system who dig their heels in over who should do the work. The reason we worry about Conway’s Law is time, which costs money and a lot of painful meetings, in order to repurpose a system to fulfil different functions.&lt;/p&gt;

&lt;p&gt;I believe it is possible to diminish the impact of change by working &lt;strong&gt;with&lt;/strong&gt; Conway’s Law. We can work purposefully to create more fluidity in the “human layer” of our systems. We can build awareness of the wider system by gradually exposing people who work on the system to different areas of code. As XP practitioners, teams at &lt;a href=&quot;http://tech.unruly.co/&quot;&gt;Unruly&lt;/a&gt; follow the XP principle of Collective Ownership. All our code is developed in pairs and more recently &lt;a href=&quot;http://rachelcdavies.github.io/2015/04/15/mob-programming.html&quot;&gt;mobs&lt;/a&gt;. To make this possible, we try to hire generalists over specialists and build opportunities in for developers to &lt;a href=&quot;http://rachelcdavies.github.io/2014/07/17/broadening-developer-horizons.html&quot;&gt;broaden&lt;/a&gt; their skills.&lt;/p&gt;

&lt;p&gt;When we split into product teams, a few years ago, we wanted to create independent teams that could deploy changes to our products without waiting on another team. However, we were aware that the move to work as independent teams would likely to lead to divergence in coding practice, which might later make it hard to move people or code between teams. We deliberately chose to combat this risk by proactively offering the opportunity to all developers to rotate between teams. We regularly ask everyone if they’d like to switch team, what their preference on team and timing would be. Team moves are not guaranteed - it wouldn’t make sense to move everyone around at the same time. We don’t force anyone to move either, we find that’s not necessary. Having someone coming into your team from another team brings in new ideas and answering their questions can trigger existing team members to reconsider design decisions. In addition to longer rotations, we also have blocks of cross-team pairing days each month, dedicated to improving our infrastructure and UX across our systems.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/roundabout.jpg&quot; alt=&quot;Developer rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Following our experience with &lt;a href=&quot;http://rachelcdavies.github.io/2014/05/12/developer-exchange.html&quot;&gt;Developer eXchanges&lt;/a&gt; with other companies, we now do mini-exchanges between our own teams for shorter periods. All our new developers get to work in each of the other teams to help them build a broader sense of our codebase and user needs. We also do mini-exchanges with more senior developers, when a team is picking up a new area of code from another team, we send someone with the code to fill in the background about how it currently works. Mob programming is currently our favourite way of getting a team started on a new area of code. &lt;/p&gt;

&lt;p&gt;By deliberately building mechanisms that allow all developers to work on code with another team, we find that we are more easily able to take on change in our codebase. It would be great to hear about other organisations who are taking Conway’s Law seriously and attempting to reduce the cost of change through applying XP principles.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2015/04/20/afraid-conways-law.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2015/04/20/afraid-conways-law.html</guid>
        
        
      </item>
    
      <item>
        <title>Modern XP, Join The Mob</title>
        <description>&lt;p&gt;The classic “Extreme Programming Explained” encourages us to embrace change and turn up the dials on good practice. But so much has changed in industry since the white book came out; descriptions of how work was done at Chrysler in the 90’s almost sound archaic to the next generation of software developers. Although XP is not mainstream, we have an active community evolving XP practice work guided by XP values and principles. I’d like to make it easier for developers to find out what it means to practice modern XP.&lt;/p&gt;

&lt;p&gt;Paired programming is still the most controversial practice of XP. The benefits to any developer who has tried it are clear. Pairing helps retain focus on the task at hand while maintaining discipline on our approach to coding. Rotating partners fluidly on a team builds collective code ownership and shares knowledge across a team. The result is that all team members feel confident to change any part of the code. Yes, pair programming can be &lt;a href=&quot;http://codurance.com/2015/03/15/rethinking-pair-programming/&quot;&gt;intense&lt;/a&gt; but there are plenty of other activities that members of an XP team attend to – if pair programming feels like a constant grind, you are doing it wrong!&lt;/p&gt;

&lt;p&gt;As extreme programmers, we can turn up the dials on this collaborative programming and make it even more fun. Anyone who has sat with an XP team will notice that pairing often expands to tripling when a pair is wrestling with a tricky problem. &lt;a href=&quot;http://www.mobprogramming.org&quot;&gt;Mob Programming&lt;/a&gt; is the deliberate choice to work together as a team on a single story. I’m not talking about “swarming” where more than one pair works in parallel on the same story. Mobbing is where the whole team writes production code on a single machine.&lt;/p&gt;

&lt;p&gt;Mobbing enables everyone on the team to get their head around a challenging problem and share their ideas on how to solve it. Although teams at &lt;a href=&quot;http://tech.unruly.co/&quot;&gt;Unruly&lt;/a&gt; initially planned mobbing by declaring “Mob Fridays” and later “Mob Mondays”, anchoring mobbing to a particular day of the week doesn’t work out that well. Mob programming is most useful on more challenging tasks that are complex enough to engage the minds of the whole team. If we wait to mob until Friday, the meaty work may already be done and more mundane tasks may be the most valuable to deliver that day – no one enjoys being in a bored mob.&lt;/p&gt;

&lt;p&gt;Now our teams decide whether to mob or pair when considering what to work on at morning standup. We pair on smaller pieces of work that will likely be delivered in a single day. We tend to mob when we’re starting work on more critical code that everyone will need to maintain. In addition to developing production code, we usually have a bunch of other work to do - researching upcoming product features, helping our users apply our products to upcoming campaigns, and improving our knowledge of technical solutions available. For less critical code, we may run a “mini-mob” where 3 or 4 developers run a shorter mobbing session leaving remaining developers available to work on other tasks.&lt;/p&gt;

&lt;p&gt;Practical aspects of our mob setup are different to other companies like &lt;a href=&quot;https://www.youtube.com/watch?v=p_pvslS4gEI&quot;&gt;Hunter Industries&lt;/a&gt; and &lt;a href=&quot;http://archive.vector.org.uk/art10501360&quot;&gt;Ericsson&lt;/a&gt;. We mob in an open plan workspace shared by 3 teams, see photos below. Each team has one large high-resolution screen, which can be used for mob sessions. The team places another screen to the side and that’s where the driver sits to write code. The team uses a timer to run “randori” style rotation, every 10 mins a developer switches into the driving seat. We have noticed that a developer can duck out of a mob session to attend to an interruption then quickly get back into the flow with very little disruption to the mob.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://rachelcdavies.github.io/images/ChutMob.jpg&quot; alt=&quot;Chutney Mob&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As a coach, I notice that mob programming helps us remember how important it is to keep our test runs and deployments fast – we don’t want to have a whole team of developers waiting around for the tests to eventually pass. Developers quickly enjoy mobbing, as they start cracking the problems in hand, deploying as they go. Mobs can get noisy for surrounding teams but that’s generally fine, we’re used to pairing in an open workspace. A team that’s mobbing needs to take care not to get too carried away with the fun of working as a group. It helps to have breakout sessions around a whiteboard to discuss where the mob is headed so everyone has a clear picture of what they’re working towards. In our space, the whiteboard-on-wheels also acts as a baffle to reduce noisy chatter leaking out.&lt;/p&gt;

&lt;p&gt;I’ll be giving a presentation about how our teams approach Mobbing at &lt;a href=&quot;http://www.meetup.com/Bristol-Girl-Geek-Dinners/events/221328972/&quot;&gt;Bristol Girl Geeks&lt;/a&gt; next week, check out the slides &lt;a href=&quot;http://www.slideshare.net/RachelDavies/mob-programming-47289482&quot;&gt;here&lt;/a&gt;. Also &lt;a href=&quot;http://probablyfine.co.uk/&quot;&gt;Alex Wilson&lt;/a&gt; will be presenting his more in-depth experience report on Mob Programming at XP2015 conference in Finland in May. I  plan more posts here on the details of modern XP practice but in the meantime Benji Weber has already written up a great &lt;a href=&quot;http://benjiweber.co.uk/blog/2015/04/17/modern-extreme-programming/&quot;&gt;summary&lt;/a&gt;. If you’d like to share how XP practice has evolved in your team then please do get in touch as we are on the look out for talks and demos for &lt;a href=&quot;http://tech.unruly.co/events.html&quot;&gt;Extreme Programmers London&lt;/a&gt; meetup.&lt;/p&gt;

</description>
        <pubDate>Wed, 15 Apr 2015 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2015/04/15/mob-programming.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2015/04/15/mob-programming.html</guid>
        
        
      </item>
    
      <item>
        <title>Moving from Typepad to Jekyll</title>
        <description>&lt;p&gt;I recently migrated this website from Typepad to &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt; using &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. Here are some of the reasons why and some tips on getting started with Jekyll.&lt;/p&gt;

&lt;p&gt;My main reason for moving away from Typepad is to simplify the layout of my blog. I’m no longer in the consulting game and also wish to retire my ancient website – thrown together in PHP one rainy Sunday more than 10 years ago! Nowadays, I’d like a simple website around my blog with as little hassle required polishing posts. When both these moves are complete, I’ll also save a few pennies on hosting costs.&lt;/p&gt;

&lt;p&gt;My usual pattern is to write my blog posts as plain text files while I’m offline on the train to London. I was used to pushing these into Typepad when I  eventually got online. One of the fiddly bits in moving from a plain text draft was positioning photos with related text using Typepad platform. I was attracted to Jekyll as it enables me to edit pages on my laptop using a basic text editor and check what they look like by running locally before pushing them to &lt;a href=&quot;https://github.com/rachelcdavies&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I already had a GitHub account so getting started with &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github pages&lt;/a&gt; was straightforward. Next I downloaded &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; which has plenty of helpful documentation. I exported my posts from Typepad and ran &lt;a href=&quot;https://github.com/dams/typepad_to_jekyll&quot;&gt;typepad_to_jekyll&lt;/a&gt;. Now running locally, I could see that everything I’d written since 2004 was safely over!&lt;/p&gt;

&lt;p&gt;I did a bit of tinkering with layout after reading some tips from &lt;a href=&quot;http://joshualande.com/jekyll-github-pages-poole/&quot;&gt;Joshua Lande&lt;/a&gt;. I decided not to enable comments as I’d like to move discussion over to &lt;a href=&quot;https://twitter.com/rachelcdavies&quot;&gt;Twitter&lt;/a&gt; so I’ve implemented his Twitter plug on my blog posts.&lt;/p&gt;

&lt;p&gt;I also wanted an &lt;a href=&quot;http://rachelcdavies.github.io/events/&quot;&gt;Events&lt;/a&gt; page generated from simple markdown files listing name and link of event and was very happy how quick this was to put together. See snippet below.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;{% for event in site.events %}
  {{ event.date | date: &amp;#39; %d %b %Y &amp;#39;}} &lt;span class=&quot;ni&quot;&gt;&amp;amp;raquo;&lt;/span&gt; [{{ event.title }}]({{ event.link }})
{% endfor %}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;My new site is still work-in-progress, many photos embedded in old posts link to images on Typepad – I’ll be gradually trawling through to clean those up. The site also has rather a vanilla look to it for now. But I’m happy with my new site and definitely have a smoother workflow for new posts. Please alert me to any glitches you spot with it.&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Jan 2015 16:18:09 +0000</pubDate>
        <link>http://rachelcdavies.github.io/2015/01/05/typepad-to-jekyll.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2015/01/05/typepad-to-jekyll.html</guid>
        
        
      </item>
    
      <item>
        <title>Beyond Coding</title>
        <description>&lt;p&gt;Software development on anything more than a pet projects is a collaborative activity. To enable a group of developers to make any headway, some details inevitably need to be hammered out together. However, you probably find that getting agreement within a group of opinionated developers can be difficult at the best of times. Most software developers haven&amp;#39;t had training in &amp;quot;soft skills&amp;quot; and you may find it hard to know where to start when a difficult question needs to be thrashed out.&lt;/p&gt;
&lt;p&gt;Here are some pointers to areas that you might want to explore beyond the realm of programming languages, methods and frameworks.&lt;/p&gt;
&lt;p&gt;Facilitation is all about making conversations easier but even with a clear meeting purpose and agenda, you may find meetings can go around in circles without reaching consensus. To understand some approaches to making group decisions I recommend &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/927064.Facilitator_s_Guide_to_Participatory_Decision_Making&quot; target=&quot;_blank&quot; title=&quot;Facilitators Guide to Participatory Decision Making&quot;&gt;Facilitator&amp;#39;s Guide to Participatory Decision-Making&lt;/a&gt;&amp;quot; which introduces decision making rules. You can also get affordable hands-on training in facilitation from non-profit ICA-UK on &lt;a href=&quot;http://www.ica-uk.org.uk/group-facilitation-methods/&quot; target=&quot;_blank&quot; title=&quot;Group Facilitation Methods&quot;&gt;Group Facilitation Methods&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Another thing you can do to help meeting participants is to create visible agendas and capture points being discussed concisely. If you want to build more confidence with writing neatly on flipcharts and whiteboards, seek out a course in &lt;a href=&quot;http://graphicsmadeeasy.co.uk/&quot; target=&quot;_blank&quot; title=&quot;graphic facilitation&quot;&gt;graphic facilitation&lt;/a&gt; where you can pick up tips and practice with other budding facilitators. To improve how you illustrate system dynamics in group discussions, start to practice drawing Diagrams of Effects. Peter Senge&amp;#39;s book &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/255127.The_Fifth_Discipline&quot; target=&quot;_blank&quot; title=&quot;The Fifth Discipline&quot;&gt;The Fifth Discipline&lt;/a&gt;&amp;quot; has a an excellent introduction to Systems Thinking and an handy set of system archetypes that you can use in different situations.&lt;/p&gt;
&lt;p&gt;There&amp;#39;s an old joke: &lt;em&gt;What is the difference between a Methodologist and a Terrorist? You can negotiate with a terrorist!&lt;/em&gt; When discussions get heated, it&amp;#39;s&amp;#0160; handy to know a little bit about negotiation techniques. The Harvard Negotiation Project have put out a few paperbacks and I recommend &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/22590500-getting-past-no&quot; target=&quot;_blank&quot; title=&quot;Getting Past No&quot;&gt;Getting Past No: Negotiating With Difficult People&lt;/a&gt;&amp;quot; by Fisher and Ury. Another easy read around building trust is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/873993.The_Trusted_Advisor&quot; target=&quot;_blank&quot; title=&quot;The Trusted Advisor&quot;&gt;The Trusted Advisor&lt;/a&gt;&amp;quot; by Maister, Green and Galford.&lt;/p&gt;
&lt;p&gt;Lastly remember that we can improve communication in our teams by starting with ourselves and how we express our own opinions. A good place to start is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/71730.Nonviolent_Communication&quot; target=&quot;_blank&quot; title=&quot;Nonviolent Communication&quot;&gt;Nonviolent Communication&lt;/a&gt;&amp;quot; by Marshall Rosenberg. An older book that&amp;#39;s worth getting hold of to get a different perspective on the way you share feedback is &amp;quot;&lt;a href=&quot;http://www.goodreads.com/book/show/2912931-what-did-you-say&quot; target=&quot;_blank&quot; title=&quot;The Art of Giving Feedback&quot;&gt;The Art of Giving Feedback&lt;/a&gt;&amp;quot; by Charles Seashore and Gerald Weinberg.&lt;/p&gt;
&lt;p&gt;I hope these resources help you in situations where you need to go outside your comfort zone. Please do let me know if you have other recommended reading to share that goes beyond coding.&lt;/p&gt;

</description>
        <pubDate>Wed, 17 Dec 2014 00:00:00 +0000</pubDate>
        <link>http://rachelcdavies.github.io/2014/12/17/beyond-coding.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/12/17/beyond-coding.html</guid>
        
        
      </item>
    
      <item>
        <title>Workplace Design : Creating a Home from Home</title>
        <description>&lt;img alt=&quot;Lola&quot; style=&quot;float: right;&quot; src=&quot;/images/pug.jpg&quot; title=&quot;Lola the Pug&quot; /&gt;		
&lt;p&gt;Last week one of our stakeholders brought his pug dog, Lola, along to our product review meeting. “Watch out, she likes feet!” he joked but she remained quiet and well behaved throughout the meeting. Unruly is not the only place I’ve come across where dogs have been accommodated at work, another had a dog basket in their main board room. I appreciate not everyone likes dogs around but I like working for a company that’s not too stuffy to allow people flexibility to make our workplace more homely.&lt;/p&gt;

&lt;p&gt;We’re lucky at Unruly to have a dedicated People &amp;amp; Places team who work closely with our Design team create a work environment that has personal touches. There are many informal meeting places around the building to make collaboration easy and it’s decorated with original artwork reflecting our culture.&lt;/p&gt; 

&lt;p&gt;Little things amaze visitors as we show them around, for instance we created a two-way webcam portal between our London and New York office with a gold antique-style frame, which makes it seem more special and echoes Harry Potter where characters move around.&lt;img alt=&quot;GoldFramePortal&quot; style=&quot;float: middle;&quot; src=&quot;/images/portal.jpg&quot; title=&quot;GoldFramePortal&quot; /&gt;&lt;/p&gt;
&lt;p&gt;What’s the business case? Creating an environment that allows human expression encourages creativity to flourish in our work.&lt;/p&gt;

&lt;p&gt;The design of our workspace is not owned by a central team outside development. &lt;img alt=&quot;DeskMove&quot; style=&quot;float: right;&quot; src=&quot;/images/moving.jpg&quot; title=&quot;DeskMove&quot; /&gt;We recently reorganised our desks and unlike many companies, where a &amp;quot;Desk Move&amp;quot; is a dreaded logistical nightmare involving packing things up for another team to execute overnight, 
our developers simply got stuck into disassembling desks and lifting floor tiles themselves to get everything in the right place. Our spirit of &lt;em&gt;&lt;strong&gt;collective ownership&lt;/strong&gt;&lt;/em&gt; and taking responsibility for how our code structured seems to extend out to our surroundings. Taking care of our workspace, isn’t somebody else’s job.&lt;/p&gt;

&lt;p&gt;Our teams use our walls and whiteboards for practical purposes but with a sense of humour too. Even electronic tools get a bit of customisation, we use Trello for our backlogs and teams can add distinctive backgrounds to make them easier to pick out.&lt;/p&gt;

&lt;p&gt;Teams in bigger companies often find that their boards are the easiest areas to start personalising, when you introduce Kanban boards you can involve everyone on the team in designing the layout. Rather than diving straight into moving things around, create a mini-version of the new layout with sticky notes so the team can make adjustments before implementing. This way everyone on the team gets the opportunity to mull the proposed design over and suggest a few tweaks. We’ve taken this approach with how we lay out our boards and our desks (as in the examples below).&lt;/p&gt;
&lt;p&gt;
&lt;img alt=&quot;BoardLayout&quot; src=&quot;/images/boarddesign.png&quot; title=&quot;BoardLayout&quot; /&gt;
&amp;nbsp;&lt;/p&gt;&lt;p&gt;
&lt;img alt=&quot;Desklayout&quot; src=&quot;/images/plan.jpg&quot; title=&quot;Desklayout&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;I appreciate that many people work in organisations that don’t actively support personalisation of the workspace but you can start small with a potted plant, a team mascot, a little whiteboard artwork. You&amp;#39;ll likely find personal touches are noticed and soon start to spread around surrounding teams. Another small step that you can take is to adopt iteration names or pictures that pick up on what’s going on in the outside world or reflect metaphorically on current mood within the team. In software development, we spend a lot of time in an office environment, taking care of your surroundings helps to take care of the people working within them.&lt;/p&gt;
</description>
        <pubDate>Wed, 23 Jul 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/07/23/workplace-design-creating-a-home-from-home.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/07/23/workplace-design-creating-a-home-from-home.html</guid>
        
        
      </item>
    
      <item>
        <title>Broadening Developer Horizons</title>
        <description>&lt;p&gt;XP is an approach that helps us to deliver valuable software iteratively, to apply it we need to setup our teams to make releasing change to customers as easy as possible. We avoid waiting around for individual team members to make changes, by applying classic XP practices -- Collective Code Ownership and Pair Programming. Each pair of developers is free to change any code that they need to without anyone vetting their changes, they ensure that all tests pass and keep code relatively clean by refactoring as they go. We share knowledge across the team by rotating pairs daily. If a pair runs into difficult decisions regarding design choices, they can call for a huddle with their team mates, sitting together in an open workspace means that&amp;#39;s quick to do. This XP way of developing code is liberating as we can easily make changes in the right place rather than working around organisational barriers. It can be also be humbling, as our code is often improved by other developers as they pass through.&lt;/p&gt;

&lt;p&gt;To work this way, we find it helps to build teams of extremely capable developers who can work on any area of the codebase rather than hiring a mix of frontend/backend/DBA specialists. Developers who only know enough to work in a single layer of the codebase limit who&amp;#39;s available to pair on the piece of work which is most valuable to pick up next. At Unruly, we only hire “full-stack” developers, this gives us confidence that any pair of developers can work on any area of the codebase (within the products that their team is responsible for) without experiencing hand-offs and delays waiting for developers with a different skill set. It also helps avoid some of the friction that can spark due to single-layer thinking.&lt;/p&gt;

&lt;p&gt;To make collective code ownership easier, some product teams select a homogeneous stack such as Clojure with ClojureScript or JavaScript all the way down using Node. At Unruly, our developers need to be fluent in JavaScript and Java with a smattering of Scala. Full-stack developers are bright people who can keep pace with developments in multiple languages and frameworks rather than immersing themselves in a single core development language. Being a full-stack developer is more than being able to write code in different languages, you have to understand idioms and patterns for UI, middleware, database realms too.&lt;/p&gt;

&lt;p&gt;Being a full-stack developer is also much more than becoming a polyglot programmer. Laurence Gellert’s explains in his &lt;a href=&quot;http://www.laurencegellert.com/2012/08/what-is-a-full-stack-developer/&quot; target=&quot;_blank&quot; title=&quot;What Is a Full Stack Developer&quot;&gt;blog&lt;/a&gt; that there’s a greater breadth of skills that a “full-stack” developer needs. You’ll need to appreciate the environment that your live system runs within and have the technical chops to be at home with making environment changes. You&amp;#39;ll also need to broaden your horizons beyond thinking about code and get to grips with developing a fuller understanding of the business you work in! Michael Feathers recently gave a &lt;a href=&quot;https://www.skillsmatter.com/skillscasts/5473-the-full-spectrum-developer&quot; target=&quot;_blank&quot; title=&quot;The Full Spectrum Developer&quot;&gt;talk&lt;/a&gt; in London where he used the term “&lt;em&gt;Full Spectrum Developer&lt;/em&gt;” which neatly captures the idea that there&amp;#39;s much more than being able to work across different software layers in a given architecture.&lt;/p&gt;

&lt;img alt=&quot;Using-laptop-on-snowy-mountain&quot; src=&quot;/images/laptopmountain.jpg&quot; title=&quot;Using-laptop-on-snowy-mountain&quot; style=&quot;float: right;&quot;/&gt;
&lt;p&gt;As the software craftsmanship movement has brought to the fore, serious developers need to take personal responsibility for improving their skills. Of course, becoming a full-stack developer is more than reading the odd business book in your spare time and writing toy programs in obscure languages when you get home from a long day at work. You can also get together with likeminded developers on a regular basis to hone your skills through Code &amp;amp; Coffee sessions outside work and work on pet projects like building games and mobile apps at home. But in my opinion, this only scratches the surface - you will only get to grips with being a full-spectrum developer by working in an environment that allows you to get your hands dirty across the full stack and interact directly with users and stakeholders. Typically these are startups or small companies that practice agile software development. If you take a look at our current &lt;a href=&quot;http://unruly.co/about-us/#work-unruly&quot; target=&quot;_blank&quot; title=&quot;build the platform&quot;&gt;open roles&lt;/a&gt;, you’ll see they’re much broader that you’d typically find in a large corporation.&lt;/p&gt;
	
&lt;p&gt;As an agile coach working with product development teams at Unruly, my focus is on how we can support developers to expand their horizons, to gain a better understanding of our business and how they can help figure out the most valuable software to deliver iteratively. Our developers take responsibility for researching different strands of product development and identify the most valuable ideas to take through to implementation (I&amp;#39;ll write-up more about how we do this in another post soon).&lt;/p&gt;

&lt;p&gt;We also recognise that build learning time into our work week is essential for developers to stay abreast of new tools and frameworks. All of our developers get one day per week to dabble and learn new technologies — see my previous post about &lt;a href=&quot;http://rachelcdavies.github.io/2014/02/24/gold-cards-and-viking-helmet.html&quot; target=&quot;_blank&quot; title=&quot;Gold Cards&quot;&gt;Gold Cards&lt;/a&gt;. We recognise that industry conferences can be places where you hear about new trends so developers get three days and an annual allowance to spend on attending any conference they feel is relevant to the personal development at work. Our developers also take turns running weekly coding dojos (during work time not through their lunch) to get hands-on practice time with new languages such as Go, Scala, Rust and mobile phone application development. Developers get the opportunity to share what they learned to other teams through lightning talks and this gives them practice in presenting too. All of these things are ways that organizations can support developers in broadening their horizons while at work rather than eating into their early mornings and evenings.&lt;/p&gt;

&lt;p&gt;There are a few things for developers to weigh up when considering whether to specialise deeply or broaden their horizons. What do you sacrifice when following one path versus rewards to be gained? The main reward for full-spectrum developers is building greater confidence to dive into different technologies; you may spend less time writing code but become more able to deliver end-to-end solutions that hit the spot. As generalists, you likely have a wider choice of companies to work at and are more resilient to industry trends. As specialists, you gain the pleasure of total immersion in a particular sphere of software while you build tolerance to the frustrations of waiting around for others to do their bit. It&amp;#39;s up to you!&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Jul 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/07/17/broadening-developer-horizons.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/07/17/broadening-developer-horizons.html</guid>
        
        
      </item>
    
      <item>
        <title>Good Enough Software Design? Try Testing DX of your Code</title>
        <description>&lt;p&gt;Every day writing code we make many design decisions about naming and encapsulation of functionality. Our primary concern is to express our code in a way that can easily be understood at a later date so changes can be made cleanly. To this end, we&amp;#39;ve learned to organise our code into smaller elements that can be composed neatly to support system behaviours, as where code gets complicated misunderstandings can happen.&lt;/p&gt;

&lt;p&gt;When trying to figure out code quality, developers normally lean on software to analyse code complexity and test coverage. Perhaps we might learn more about how good our design is by starting to apply techniques from UX to measure DX (Developer eXperience)?&lt;/p&gt;

&lt;p&gt;Developers are primary users of our software design, often working across a vast and complex codebase that&amp;#39;s difficult to navigate around. Sometimes our code terrain is too crowded with repurposed junk and other times it&amp;#39;s hard to see the wood for the trees with no easy landmarks to navigate by. We could start to measure how easy the code is for developers to navigate. How long does it take a developer to pinpoint the location of code to change? How many places do they look before finding the relevant areas to change? etc.&lt;br /&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d35505970c-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;Goldfishbowltitle&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511d35505970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d35505970c-200wi&quot; style=&quot;width: 200px; margin: 0px 0px 5px 5px;&quot; title=&quot;Goldfishbowltitle&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;My interest in DX was rekindled by a recent discussion at &lt;a href=&quot;http://socratesuk.org/&quot; target=&quot;_blank&quot; title=&quot;International Software Craftsmanship gathering&quot;&gt;SoCraTes&lt;/a&gt; on “What is good software design?”.&amp;#0160; I sighed inwardly when the topic was chosen by the crowd and if I hadn&amp;#39;t been on facilitator duty, I&amp;#39;d probably have skipped the discussion entirely. How wrong I was! I’ll try to sum up the highlights and link to some earlier thoughts I had on topic of DX following a talk at London&amp;#39;s Design Museum on the &lt;a href=&quot;designmuseum.org/signup/newswire/updates-2013-01-28-talks-updates&quot; target=&quot;_blank&quot; title=&quot;Underground Maps Unravelled&quot;&gt;usability of Underground maps&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d3549f970c-pi&quot; style=&quot;float: left;&quot;&gt;&lt;img alt=&quot;Fish&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a511d3549f970c img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a511d3549f970c-320wi&quot; style=&quot;margin: 0px 5px 5px 0px;&quot; title=&quot;Fish&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;We ran this evening discussion as a &lt;a href=&quot;http://c2.com/cgi/wiki?FishBowl&quot; target=&quot;_blank&quot; title=&quot;Fish Bowl&quot;&gt;Fish Bowl&lt;/a&gt; — you can only comment on the discussion topic, if you are in the &amp;#39;bowl&amp;#39; — 4 chairs at the front. One chair is always kept empty, to allow anyone in the room to jump in with a question or share some relevant information. The &amp;quot;fish&amp;quot; in this photo are: &lt;a href=&quot;https://twitter.com/Chris_Jeffery&quot; target=&quot;_blank&quot; title=&quot;Chris&quot;&gt;Chris Jeffe&lt;/a&gt;&lt;a href=&quot;https://twitter.com/Chris_Jeffery&quot; target=&quot;_blank&quot; title=&quot;Chris&quot;&gt;ry&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/mashooq&quot; target=&quot;_blank&quot; title=&quot;Mash&quot;&gt;Mashooq Badar&lt;/a&gt;, &lt;a href=&quot;https://twitter.com/Steve_Hayes&quot; target=&quot;_blank&quot; title=&quot;Steve&quot;&gt;Steve Hayes&lt;/a&gt; but many people jumped in and out of our conversation. Here are some of the points that I found most interesting:&lt;/p&gt;
&lt;p&gt;Design is how we layout the code to make it easy to maintain. It may appear that there’s no external impact of software design and it&amp;#39;s pretty intangibe how we evaluate one design over another. However, there are measurable external affects on staff retention, ease of change and developer mood. Corey Haines has been working on &lt;a href=&quot;https://www.mercuryapp.com/&quot; target=&quot;_blank&quot; title=&quot;Mercury App&quot;&gt;Mercury App&lt;/a&gt;, a tool which can be used by a developer to track their mood over time.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://twitter.com/tooky&quot; target=&quot;_blank&quot; title=&quot;Tooky&quot;&gt;Steve Tooke&lt;/a&gt; mentioned &lt;a href=&quot;https://twitter.com/sandimetz&quot; target=&quot;_blank&quot; title=&quot;Sandi Metz&quot;&gt;Sandi Metz&lt;/a&gt;&amp;#39;s &lt;a href=&quot;http://josericardo.eti.br/2011/09/18/less-path-design-sandi-metz-goruco-2001/&quot; target=&quot;_blank&quot; title=&quot;TRUE&quot;&gt;TRUE&lt;/a&gt; criteria for design judgement&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;T&lt;/strong&gt;ransparent &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;R&lt;/strong&gt;easonable &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;U&lt;/strong&gt;sable &lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;strong&gt;E&lt;/strong&gt;xemplary&lt;/em&gt;&lt;a class=&quot;asset-img-link&quot; href=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd26b229970b-pi&quot; style=&quot;float: right;&quot;&gt;&lt;img alt=&quot;Measure&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a3fd26b229970b img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a3fd26b229970b-320wi&quot; style=&quot;margin: 0px 0px 5px 5px;&quot; title=&quot;Measure&quot; /&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We talked about designing for use and as developers are primary users of our code perhaps we should think more about the developers who come after us. &lt;a href=&quot;http://www.exampler.com/ease-and-joy.html&quot; target=&quot;_blank&quot; title=&quot;Brian Marick on Joy&quot;&gt;Brian Ma&lt;/a&gt;&lt;a href=&quot;http://www.exampler.com/ease-and-joy.html&quot; target=&quot;_blank&quot; title=&quot;Brian Marick on Joy&quot;&gt;rick&lt;/a&gt; has summarised good code as that which brings &lt;strong&gt;joy&lt;/strong&gt; to those who come after (users and programmers). Maybe we can aspire to bring joy to developers who read our code months or years after we write it! We could apply techniques from UX practitioners to start measuring accessibility and navigability of our codebases. We could use our findings to identify worst pain points, bringing focus to our cleanup attempts and measure whether working conditions have improved through user testing. &lt;a href=&quot;https://twitter.com/dmitrykandalov&quot; target=&quot;_blank&quot; title=&quot;Dmitry Kandalov&quot;&gt;Dmitry&lt;/a&gt; urged us to &amp;quot;Track everything that developers do!&amp;quot;&lt;/p&gt;
&lt;p&gt;And &lt;a href=&quot;https://twitter.com/annajayne&quot; target=&quot;_blank&quot; title=&quot;Anna Jayne&quot;&gt;Anna Jayne&lt;/a&gt; added via #SoCraTesUK twitter stream that we already sort of do in &lt;a href=&quot;http://www.osnews.com/story/19266/WTFs_m&quot; target=&quot;_blank&quot; title=&quot;WTF per min&quot;&gt;WTFs per min&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;All this reminded me that I had some similar thoughts about measuring DX last year. My fascination for maps took me to London’s Design Museum to hear a talk by cognitive psychologist, Maxwell Roberts, who has been measuring the &lt;a href=&quot;http://now-here-this.timeout.com/2013/02/18/going-deeper-underground-max-roberts-discusses-the-future-of-the-tube-map-at-designmuseum/&quot; target=&quot;_blank&quot; title=&quot;Future of the tube map&quot;&gt;effectiveness of different layouts of underground maps&lt;/a&gt;. I thought the same approach might be used to assess the accessibility of different software designs/architectures, sort of UX from a programmer perspective. &lt;br /&gt;&lt;br /&gt;I also heard at SoCraTes that DX of API’s is already being tested see this &lt;a href=&quot;http://blog.pamelafox.org/2011/04/what-makes-good-developer-experience.html&quot; target=&quot;_blank&quot; title=&quot;What Makes Good DX&quot;&gt;post&lt;/a&gt; from Pamela Fox and Jeremiah Lee has also run some workshops on &lt;a href=&quot;http://dx.jeremiahlee.com/&quot; target=&quot;_blank&quot; title=&quot;The UX of API&amp;#39;s&quot;&gt;DX&lt;/a&gt; at SXSW and Fluent conf&lt;br /&gt;&lt;br /&gt;At the Design Museum, Maxwell talked about &amp;quot;information pollution&amp;quot; and how we want to reduce cognitive load for users in processing what they see in front of them. It also helps if a map doesn&amp;#39;t significantly conflict with their mental model of the actual topography of the city. Clearly cognitive load must be a big factor in understanding the software design, as we try to figure out where to insert behaviours into a software system. Although we try to use meaningful names to help make code self-explanatory perhaps when a developer is confronted train wreck of long names in a literal programming style iit actually makes it harder to see the structure than using shorter names. We could test this kind of thing using DX. &lt;br /&gt;&lt;br /&gt;Also the comparison of a underground map and city topography (people find London underground map easier when the Thames river is shown) might be similar to the software architecture/metaphor matching to real-world domain.&lt;br /&gt;&lt;br /&gt;Maxwell&amp;#39;s point was that people often use same design rules without thinking about whether they are the best possible for the problem. He&amp;#39;s a proponent of a UX technique - &lt;strong&gt;Evidence Based Information Design&lt;/strong&gt; and has been doing testing of different underground map designs for the same city (octolinear/hexalinear vs curves, etc). He takes objective measures: how long does it take a user to do X? Where X might be station finding or journey planning. He also takes subjective measures: how to users rate the map? which map would they choose?&lt;br /&gt;&lt;br /&gt;His findings are interesting. Subjective measures on aesthetics don&amp;#39;t correlate with which map is quicker to use. People like designs which seem familiar even though tests show that other designs are quicker to navigate. I thought of how conventional/familiar coding styles put developers at ease even though actual design may be a bad fit for a problem.&lt;/p&gt;

&lt;p&gt;His design principles for maps were:&lt;br /&gt;
&lt;ul&gt;
&lt;li&gt;Simplicity&lt;/li&gt;
&lt;li&gt;Coherence (shape/structure)&lt;/li&gt;
&lt;li&gt;Balance&lt;/li&gt;
&lt;li&gt;Harmony&lt;/li&gt;
&lt;li&gt;Topography alignment&lt;/li&gt;
&lt;li&gt;Reduce supplementaty info&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;

&lt;p&gt;When we create maps we want to map topography and reveal structure but we may need to discard current conventions to do so. We should beware following tradition without theory about why it&amp;#39;s being applied to this particular problem. For underground maps, people are too hooked on octolinear style (following early success of London underground map in 1930&amp;#39;s) but other styles are better for different city geographies. Perhaps in software development we are too used to OOD conventions to see that this can obscure design.&lt;/p&gt;

&lt;p&gt;One of the last points made in our discussion at SoCraTes is one from &lt;a href=&quot;http://en.wikipedia.org/wiki/Christopher_Alexander&quot; target=&quot;_blank&quot; title=&quot;Christopher Alexander&quot;&gt;Christopher Alexander&lt;/a&gt;, whose work on architectural patterns inspired many software developers to mine design patterns for software. Apparently Alexander’s advice to the software community at an OOPSLA conference was &lt;em&gt;“Don’t extract the humanity”&lt;/em&gt; and perhaps by starting to test DX this could be a start of putting developers to the forefront of evaluating good design practice. Let’s try to write better code for the developer who comes after us by testing developer reactions now.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Jun 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/06/27/good-enough-software-design-try-testing-dx-of-your-code.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/06/27/good-enough-software-design-try-testing-dx-of-your-code.html</guid>
        
        
      </item>
    
      <item>
        <title>The Folly of Scaling Agile</title>
        <description>&lt;p&gt;I’m jotting down a few notes on Scaling Agile software development as Bucharest Agile group invited me to talk about doing this. I have already warned them that I am very skeptical about attempts to apply agile practices on large endeavours. While preparing for our conversation, I thought it might be helpful for me to blog about the reasons why I’m not a fan of Scaling Agile as this may make our conversation easier to follow and help the group to come up with some questions.&lt;br /&gt;&lt;br /&gt;When we apply Agile principles, we strip away process so that software developers can work more collaboratively with business people to identify what is the most valuable thing for them to deliver next. We focus on building working software and releasing as early as we can to help us figure out what to build based on feedback from users. Working this way is much harder when a lot of people are involved!&lt;br /&gt;&lt;br /&gt;A bunch of things break down as you scale up. The biggest one is not being able to maintain interpersonal relationships through which rich information flows, these are replaced with weaker lossy forms of communication and misunderstandings about what is the right thing to build next follow.&lt;/p&gt;
&lt;p&gt;Typical things that become difficult at scale are access to business people and infrastructure controlled by others outside immediate team. Meetings get long and tedious, we start sending a representative from each team, which introduces more secondhand information, emails and documentation.&lt;/p&gt;
&lt;p&gt;When a project is big and is being changed by many hands it becomes much harder to understand the whole, we start to introduce hierarchy with a select few looking at the bigger picture and paying attention to separating concerns to allow different teams to work in parallel. As a result, choice is removed from the team and it can feel in teams that edicts come down from on high through a series of chutes and screens that mask the reasoning behind them.&lt;br /&gt;&lt;br /&gt;Often the initial attraction of Agile approaches to a business is to reduce delivery timescales and enable developers to work faster with a lightweight approach. Working in small teams allows individuals to feel more engaged because they have some influence on how things are built. When a lot of people are working in parallel coordination becomes harder. Ideally we need skilled people who have enough experience to work independently without the guide-rails of process. &lt;br /&gt;&lt;br /&gt;Yes, I have seen plenty of organisations with large systems being maintained, expanded and extended by multiple teams. When each team has to interface to many others decisions take longer to make. Where a large number of people are working on a complex thing, it takes a lot of effort to keep up with what’s happening other areas and most reduce their focus to the work at hand. Once they reduce their focus and interfaces between teams become walls to hide behind. When myopia is easier then teams tend to make local suboptimal changes rather than considering the whole.&lt;br /&gt;&lt;br /&gt;A large body people working on a large body of code often feels crazily chaotic or oppressively bureaucratic to work within. In these conditions developer motivation is often dimmed, people leave taking away valuable knowledge of how the system evolved and why things are. New people who need to learn how things work join and struggle to make sense of it all, the situation gets worse. &lt;br /&gt;&lt;br /&gt;There are a few agile practices that can help in scaled up situations - such as having reliable automated builds, decent test coverage and teamwork but these are also painful to maintain with a lot of people involved. I’ve seen many large organisations attempt to apply Agile at scale. It’s hard and although it can bring more humanity to work in-the-small, I’m not sure there is much evidence that it is actually better than traditional ways of organising the work.&lt;br /&gt;&lt;br /&gt;I appreciate that there are large systems out in the world that need to be supported and evolved to better meet user and business needs. I remain unconvinced that throwing a lot of people at the problem makes things any faster. I believe deadlines driving this behaviour are defined without realising the impact on the maintainability and quality of existing software. Code is an asset and so is the knowledge that software developers carry - businesses can run into costly mistakes if they ignore their value.&lt;br /&gt;&lt;br /&gt;Attempting to scale to go faster is driven business greed and ambition - not a bad thing in the commercial world but it’s like seeing a someone blindfold attempting to run along a cliff edge while juggling priceless antique glass vases. Mistakes at scale are costly!&lt;/p&gt;
&lt;p&gt;When it seems that scaling up is the only way to go, challenge yourself to think of a smaller simpler thing to build sooner that gives faster feedback. Try to limit your total Work-In-Progess by reducing the amount of development being done in parallel across the organisation. When a smaller group of people is involved in development, choices about which way to go next can be made more quickly and there&amp;#39;s less waiting around. Ultimately, this goes back to Agile Manifesto values - focus on better interactions betweem individuals to produce valuable software sooner -- not on a process to enable lumbering projects at scale.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Jun 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/06/19/the-folly-of-scaling-agile.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/06/19/the-folly-of-scaling-agile.html</guid>
        
        
      </item>
    
      <item>
        <title>Conference Club</title>
        <description>&lt;h4 id=&quot;ConferenceClub-%27...thefirstruleofConferenceClubistotalkabouttalkingatConferenceClub...%27&quot;&gt;&lt;em&gt;&amp;quot;The first rule of Conference Club is to talk about talking at conferences&amp;quot;&lt;/em&gt;&lt;/h4&gt;
&lt;p&gt;Presenting at conferences is a great experience where you get to consolidate your knowledge and connect with other people passionate about the same things. But speaking in front of your peers can be a scary prospect for developers and they often underestimate the value to others of what they know. For instance in our teams, we have lots of experience&amp;#0160;with XP, Continuous Delivering, UX and JS testing frameworks. Does that mean we&amp;#39;re all experts? Not necessarily but we can share practitioner experiences and that&amp;#39;s a valuable to people who&amp;#39;re only just getting started with new approaches.&lt;/p&gt;
&lt;p&gt;Back in January, I started a lunchtime meeting called &amp;quot;Conference Club&amp;quot; for anyone in our team who wanted to learn more about the steps they need to take to present at industry conferences. Five months later, I&amp;#39;m pleased to see that several of the people who came along have submitted sessions to calls for participation and been accepted as speakers.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screen Shot 2014-05-27 at 17.34.21&quot; class=&quot;asset  asset-image at-xid-6a00e54ee21bf2883401a73dcc4f5f970d img-responsive&quot; src=&quot;http://agilecoach.typepad.com/.a/6a00e54ee21bf2883401a73dcc4f5f970d-320wi&quot; style=&quot;margin: 0px 5px 5px 0px;&quot; title=&quot;Screen Shot 2014-05-27 at 17.34.21&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Alex and Benji presented on &lt;a href=&quot;http://vimeo.com/channels/pipelineconf/96233529&quot; target=&quot;_blank&quot; title=&quot;Scaling Continuous Delivery&quot;&gt;&amp;quot;Scaling Continuous Delivery&amp;quot;&lt;/a&gt; at Pipeline conference in London&lt;/li&gt;
&lt;li&gt;Vikki presented a &lt;a href=&quot;http://2014.jsday.it/talk/if-you-like-it-then-you-should-have-put-a-test-on-it-a-comparison-of-front-end-acceptance-testing-frameworks/&quot; target=&quot;_blank&quot; title=&quot;comparison of front-end acceptance testing frameworks&quot;&gt;comparisonof front-end acceptance testing frameworks&lt;/a&gt;&amp;#0160;at JsDay in Verona&lt;/li&gt;
&lt;li&gt;Arber will be presenting on &amp;quot;Extreme Product Development&amp;quot; at &lt;a href=&quot;http://agilenorth.org/2014-conference/&quot; target=&quot;_blank&quot; title=&quot;Agile North&quot;&gt;Agile North&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Mike will be presenting on &amp;quot;&lt;a href=&quot;http://sched.co/1eEp8RW&quot; target=&quot;_blank&quot; title=&quot;Zombie Persona Apocalypse&quot;&gt;Zombie Personas&lt;/a&gt;&amp;quot; at Agile2014.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We only had a few meetings of Conference Club but it was enough to explore people&amp;#39;s worries and share some practical tips on how to get over them.&lt;/p&gt;
&lt;h3&gt;&lt;span style=&quot;font-size: 1.17em;&quot;&gt;Basic Steps&lt;/span&gt;&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;TOPIC: Identify topics you are interested in and know something about&lt;/li&gt;
&lt;li&gt;BIO: Update your profile on LinkedIn / GitHub / blog / Twitter to reflect your interest/experience&lt;/li&gt;
&lt;li&gt;WHERE: Find meetups / conferences that might people go along to discuss that topic which have open space or CFP (call for participation)&lt;/li&gt;
&lt;li&gt;DATES: When do you need to submit a proposal by, these can be upto 6 months before the conference date&lt;/li&gt;
&lt;li&gt;FORMAT: consider what format is best fit for you and conference (workshop, talk, experience report, etc)&lt;/li&gt;
&lt;li&gt;PREPARE: design material slides or exercise to lead session participants through subject of interest.&lt;/li&gt;
&lt;li&gt;PROPOSE: put forward your idea to organisers&lt;/li&gt;
&lt;li&gt;PRACTICE: do a run thru of session with small group to work out any glitches&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;One basic thing that speakers need to do is practice so we have a fortnightly lightning talks forum that can be used to build confidence speaking to an audience. Unconference events are also great places to explore a topic as you figure out what you want to present to a wider audience.&lt;/p&gt;
&lt;h3&gt;Homework Assignments&lt;/h3&gt;
&lt;p&gt;1)&amp;#0160;Write a bio for someone else at the meeting using Scott Berkun&amp;#39;s tips on &lt;a href=&quot;http://scottberkun.com/2013/how-to-write-a-good-bio/&quot; target=&quot;_self&quot; title=&quot;How to Write a Good Bio&quot;&gt;how to write a good bio&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2) Prepare an answer to one of the following questions from&amp;#0160;&lt;a href=&quot;http://www.noelrappin.com/railsrx/2014/1/18/conference-prompts-or-how-to-submit-proposals-and-influence-people&quot; rel=&quot;nofollow&quot;&gt;Noel Rappin&amp;#39;s blog&amp;#0160;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3) Write an abstract for a new session you&amp;#39;d like to propose for a user group or conference.&lt;/p&gt;
&lt;h4&gt;&lt;span style=&quot;font-size: 1.17em;&quot;&gt;Useful Blogs&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://janogonzalez.com/2013/12/02/conference-speaking-how-to.html&quot;&gt;Conference speaking HOW-TO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jenmyers.net/confessions-of-a-semi-amateur-speaker.html&quot;&gt;Confessions of a Semi-Amateur Speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://christianheilmann.com/2012/09/05/de-bricking-yourself-starting-out-as-a-speaker/&quot;&gt;Debricking yourself as a speaker&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://plg.uwaterloo.ca/~migod/research/beckOOPSLA.html&quot;&gt;Kent Beck on how to write a conference abstract&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://chadfowler.com/blog/2013/06/08/how-to-give-a-keynote/&quot;&gt;Chad Fowler on&amp;#0160;how to give a keynote&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://ladiesintech.com/sara-wachter-boettcher-fights-a-cheetah/&quot;&gt;Podcast on slowing down pace&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seriouspony.com/blog/2013/10/4/presentation-skills-considered-harmful&quot;&gt;Presentation Skills Considered Harmful&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://speaking.io/&quot;&gt;http://speaking.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://news.ycombinator.com/item?id=7059303&quot;&gt;https://news.ycombinator.com/item?id=7059303&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.linkedin.com/today/post/article/20140107225219-172811-presenters-don-t-go-the-way-of-michael-bay&quot;&gt;http://www.linkedin.com/today/post/article/20140107225219-172811-presenters-don-t-go-the-way-of-michael-bay&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.duarte.com/blog/public-speaking-for-introverts-6-essential-tips&quot;&gt;http://www.duarte.com/blog/public-speaking-for-introverts-6-essential-tips&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.coursera.org/course/publicspeak&quot;&gt;https://www.coursera.org/course/publicspeak&lt;/a&gt;&amp;#0160;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.presentationzen.com/presentationzen/2014/01/dealing-with-presentation-anxiety-stage-fright.html&quot;&gt;Dealing with stage fright&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.garrreynolds.com/Presentation/pdf/presentation_tips.pdf&quot;&gt;Presentation Zen summary&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://sixminutes.dlugan.com/vocal-variety-speech-breathing/&quot;&gt;Breathing for voice projection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=ynmemxQicQk&quot;&gt;How to project your voice&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://speaking.io/&quot;&gt;http://speaking.io/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=hRdDdS5aZMM&quot;&gt;Triangle Method for eye contact&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.annashipman.co.uk/jfdi/conference-speaking.html&quot;&gt;http://www.annashipman.co.uk/jfdi/conference-speaking.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://weareallaweso.me/&quot;&gt;http://weareallaweso.me/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://rckbt.me/2014/01/conference-proposals/&quot;&gt;http://rckbt.me/2014/01/conference-proposals/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://seb.ly/2014/05/how-to-ask-to-get-paid-to-speak/&quot;&gt;http://seb.ly/2014/05/how-to-ask-to-get-paid-to-speak/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&amp;#0160;I also recommend following &lt;a href=&quot;https://twitter.com/callbackwomen&quot; target=&quot;_blank&quot; title=&quot;Callback Women&quot;&gt;Callback Women&lt;/a&gt; to pick up upcoming call for participation.&lt;/p&gt;
&lt;p&gt;&amp;#0160;&lt;/p&gt;

</description>
        <pubDate>Tue, 27 May 2014 00:00:00 +0100</pubDate>
        <link>http://rachelcdavies.github.io/2014/05/27/conference-club.html</link>
        <guid isPermaLink="true">http://rachelcdavies.github.io/2014/05/27/conference-club.html</guid>
        
        
      </item>
    
  </channel>
</rss>
